/* Generated by: JSFX Pre-Processor (https://github.com/geraintluff/jsfx-preprocessor) */
@init

function sinh(x) local(e_x) (
	x > 20 ? (
		exp(x)*0.5;
	) : x < -20 ? (
		-0.5*exp(-x);
	) : (
		e_x = exp(x);
		(e_x - 1/e_x)*0.5;
	);
);

function filter_buffer_size() (
	9/*FILTER: A1, A2, B0, B1, B2, X1, X2, Y1, Y2*/;
);

function filter_init(steady_value) (
	this.x1 = this.x2 = this.y1 = this.y2 = steady_value;
	this.b0 = 1;
	this.b1 = this.b2 = this.a1 = this.a2 = 0;
);

function filter_sample(x0) local(y0) (
	y0 = this.b0*x0 + this.b1*this.x1 + this.b2*this.x2 - this.a1*this.y1 - this.a2*this.y2;
	this.x2 = this.x1;
	this.x1 = x0;
	this.y2 = this.y1;
	this.y1 = y0;
);

function filter_bandpass(normfreq, BW) local(inv_a0, b1, w0, sin_w0, Q, alpha) (
	w0 = 2*$pi*max(0.000001, min(0.49, normfreq));
	sin_w0 = sin(w0);
	cos_w0 = cos(w0);

	BW > 0 ? (
		Q = 0.5/sinh(log(2)*0.5*BW*w0/sin_w0);
	) : (
		Q = -BW;
	);
	alpha = sin_w0*0.5/Q;

	// TODO: this is actually a lowpass!  Do the right thing.
	inv_a0 = 1/(1 + alpha);
	this.a1 = -2*cos_w0*inv_a0;
	this.a2 = (1 - alpha)*inv_a0;

	this.b0 = alpha*inv_a0;
	this.b1 = 0;
	this.b2 = -this.b0;
);

function filter_bandpass(normfreq, BW, gain) local(inv_a0, b1, w0, sin_w0, Q, alpha) (
	this.filter_bandpass(normfreq, BW);
	this.b0 += (1 - this.b0)*gain;
	this.b1 += (this.a1 - this.b1)*gain;
	this.b2 += (this.a2 - this.b2)*gain;
);

function filter_highshelf_gainslope(normfreq, gainFactor, slope) local(A, inv_a0, b0, w0, sin_w0, Q, alpha) (
	A = sqrt(gainFactor);
	w0 = 2*$pi*normfreq;
	sin_w0 = sin(w0);
	cos_w0 = cos(w0);

	Q = 1/sqrt((A + 1/A)*(1/slope - 1) + 2);
	alpha = sin_w0*0.5/Q;
	sqrtA2alpha = 2*sqrt(A)*alpha;

	inv_a0 = 1/((A + 1) - (A - 1)*cos_w0 + sqrtA2alpha);
	this.a1 = 2*((A - 1) - (A + 1)*cos_w0)*inv_a0;
	this.a2 = ((A + 1) - (A - 1)*cos_w0 - sqrtA2alpha)*inv_a0;
	this.b0 = A*((A + 1) + (A - 1)*cos_w0 + sqrtA2alpha)*inv_a0;
	this.b1 = -2*A*((A - 1) + (A + 1)*cos_w0)*inv_a0;
	this.b2= A*((A + 1) + (A - 1)*cos_w0 - sqrtA2alpha)*inv_a0;
);

function filter_highshelf_gainband(freq, gainFactor, BW) local(A, inv_a0, b0, w0, sin_w0, Q, alpha) (
	A = sqrt(gainFactor);
	w0 = 2*$pi*freq/srate;
	sin_w0 = sin(w0);
	cos_w0 = cos(w0);

	Q = 0.5/sinh(log(2)*0.5*BW*w0/sin_w0);
	alpha = sin(w0)/(2*Q);
	sqrtA2alpha = 2*sqrt(A)*alpha;

	a0 = (A + 1) - (A - 1)*cos(w0) + sqrtA2alpha;
	this.a1 = 2*((A - 1) - (A + 1)*cos(w0))/a0;
	this.a2 = (a0 - 2*sqrtA2alpha)/a0;
	this.b0 = A*((A + 1) + (A - 1)*cos(w0) + sqrtA2alpha)/a0;
	this.b1 = -2*A*((A - 1) + (A + 1)*cos(w0))/a0;
	this.b2 = A*((A + 1) + (A - 1)*cos(w0) - sqrtA2alpha)/a0;

	/*
	inv_a0 = 1/((A + 1) - (A - 1)*cos_w0 + sqrtA2alpha);
	this.a1 = 2*((A - 1) - (A + 1)*cos_w0)*inv_a0;
	this.a2 = ((A + 1) - (A - 1)*cos_w0 - sqrtA2alpha)*inv_a0;
	this.b0 = A*((A + 1) + (A - 1)*cos_w0 + sqrtA2alpha)*inv_a0;
	this.b1 = -2*A*((A - 1) + (A + 1)*cos_w0)*inv_a0;
	this.b2 = A*((A + 1) + (A - 1)*cos_w0 - sqrtA2alpha)*inv_a0;
	*/

);

function filter_highpass(normfreq, BW) local(inv_a0, b1, w0, sin_w0, Q, alpha) (
	w0 = 2*$pi*min(0.49, normfreq);
	sin_w0 = sin(w0);
	cos_w0 = cos(w0);

	BW > 0 ? (
		Q = 0.5/sinh(log(2)*0.5*BW*w0/sin_w0);
	) : (
		Q = -BW;
	);
	alpha = sin_w0*0.5/Q;

	inv_a0 = 1/(1 + alpha);
	this.a1 = -2*cos_w0*inv_a0;
	this.a2 = (1 - alpha)*inv_a0;
	this.b0 = (1 + cos_w0)*0.5*inv_a0;
	this.b1 = -2*this.b0;
	this.b2 = this.b0;
);

function filter_lowpass(freq, BW) local(inv_a0, b0, w0, sin_w0, Q, alpha) (
	w0 = 2*$pi*min(0.49, freq/srate);
	sin_w0 = sin(w0);
	cos_w0 = cos(w0);

	BW > 0 ? (
		Q = 0.5/sinh(log(2)*0.5*BW*w0/sin_w0);
	) : (
		Q = -BW;
	);
	alpha = sin_w0*0.5/Q;

	inv_a0 = 1/(1 + alpha);
	this.a1 = -2*cos_w0*inv_a0;
	this.a2 = (1 - alpha)*inv_a0;
	this.b0 = (1 - cos_w0)*0.5*inv_a0;
	this.b1 = 2*this.b0;
	this.b2 = this.b0;
);

function filter_band(freq, gainFactor, BW) local(A, inv_a0, b0, w0, sin_w0, cos_w0, Q, alpha) (
	A = sqrt(gainFactor);
	w0 = 2*$pi*freq/srate;
	sin_w0 = sin(w0);
	cos_w0 = cos(w0);

	Q = 0.5/sinh(log(2)*0.5*BW*w0/sin_w0);
	alpha = sin_w0*0.5/Q;
	sqrtA2alpha = 2*sqrt(A)*alpha;

	inv_a0 = 1/(1 + alpha/A);
	this.a1 = (-2*cos_w0)*inv_a0;
	this.a2 = (1 - alpha/A)*inv_a0;
	this.b0 = (1 + alpha*A)*inv_a0;
	this.b1 = this.a1;
	this.b2 = (1 - alpha*A)*inv_a0;
);

function filter_notch(freq, BW) local(A, inv_a0, b0, w0, sin_w0, cos_w0, Q, alpha) (
	w0 = 2*$pi*freq/srate;
	sin_w0 = sin(w0);
	cos_w0 = cos(w0);

	Q = 0.5/sinh(log(2)*0.5*BW*w0/sin_w0);
	alpha = sin_w0*0.5/Q;
	sqrtA2alpha = 2*sqrt(A)*alpha;

	inv_a0 = 1/(1 + alpha);
	this.a1 = (-2*cos_w0)*inv_a0;
	this.a2 = (1 - alpha)*inv_a0;
	this.b0 = inv_a0;
	this.b1 = this.a1;
	this.b2 = inv_a0;
);

function filter_notch(freq, BW, gain) local(A, inv_a0, b0, w0, sin_w0, cos_w0, Q, alpha) (
	this.filter_notch(freq, BW);
	this.b0 += (1 - this.b0)*gain;
	this.b1 += (this.a1 - this.b1)*gain;
	this.b2 += (this.a2 - this.b2)*gain;
);

/**************** Buffer versions *****************/

function filter_buffer_init(freemem) local(obj) (
	obj = freemem;
	obj[0/*FILTER:A1*/] = 0;
	obj[1/*FILTER:A2*/] = 0;
	obj[2/*FILTER:B0*/] = 1;
	obj[3/*FILTER:B1*/] = 0;
	obj[4/*FILTER:B2*/] = 0;
	obj[5/*FILTER:X1*/] = 0;
	obj[6/*FILTER:X2*/] = 0;
	obj[7/*FILTER:Y1*/] = 0;
	obj[8/*FILTER:Y2*/] = 0;
	freemem + 9/*FILTER*/;
);

function filter_buffer_lowpass(obj, freq, BW) local(inv_a0, b0, w0, sin_w0, Q, alpha) (
	w0 = 2*$pi*min(0.49, freq/srate);
	sin_w0 = sin(w0);
	cos_w0 = cos(w0);

	BW > 0 ? (
		Q = 0.5/sinh(log(2)*0.5*BW*w0/sin_w0);
	) : (
		Q = -BW;
	);
	alpha = sin_w0*0.5/Q;

	inv_a0 = 1/(1 + alpha);
	obj[0/*FILTER:A1*/] = -2*cos_w0*inv_a0;
	obj[1/*FILTER:A2*/] = (1 - alpha)*inv_a0;
	b0 = obj[2/*FILTER:B0*/] = (1 - cos_w0)*0.5*inv_a0;
	obj[3/*FILTER:B1*/] = 2*b0;
	obj[4/*FILTER:B2*/] = b0;
);

function filter_buffer_highpass(obj, freq, BW) local(inv_a0, b1, w0, sin_w0, Q, alpha) (
	w0 = 2*$pi*min(0.49, freq/srate);
	sin_w0 = sin(w0);
	cos_w0 = cos(w0);

	BW > 0 ? (
		Q = 0.5/sinh(log(2)*0.5*BW*w0/sin_w0);
	) : (
		Q = -BW;
	);
	alpha = sin_w0*0.5/Q;

	inv_a0 = 1/(1 + alpha);
	obj[0/*FILTER:A1*/] = -2*cos_w0*inv_a0;
	obj[1/*FILTER:A2*/] = (1 - alpha)*inv_a0;
	b0 = obj[2/*FILTER:B0*/] = (1 + cos_w0)*0.5*inv_a0;
	obj[3/*FILTER:B1*/] = -2*b0;
	obj[4/*FILTER:B2*/] = b0;
);

function filter_buffer_highshelf_gainslope(obj, freq, gainFactor, slope) local(A, inv_a0, b0, w0, sin_w0, Q, alpha) (
	A = sqrt(gainFactor);
	w0 = 2*$pi*freq/srate;
	sin_w0 = sin(w0);
	cos_w0 = cos(w0);

	Q = 1/sqrt((A + 1/A)*(1/slope - 1) + 2);
	alpha = sin_w0*0.5/Q;
	sqrtA2alpha = 2*sqrt(A)*alpha;

	inv_a0 = 1/((A + 1) - (A - 1)*cos_w0 + sqrtA2alpha);
	obj[0/*FILTER:A1*/] = 2*((A - 1) - (A + 1)*cos_w0)*inv_a0;
	obj[1/*FILTER:A2*/] = ((A + 1) - (A - 1)*cos_w0 - sqrtA2alpha)*inv_a0;
	obj[2/*FILTER:B0*/] = A*((A + 1) + (A - 1)*cos_w0 + sqrtA2alpha)*inv_a0;
	obj[3/*FILTER:B1*/] = -2*A*((A - 1) + (A + 1)*cos_w0)*inv_a0;
	obj[4/*FILTER:B2*/] = A*((A + 1) + (A - 1)*cos_w0 - sqrtA2alpha)*inv_a0;
);

function filter_buffer_highshelf_gainband(obj, freq, gainFactor, BW) local(A, inv_a0, b0, w0, sin_w0, Q, alpha) (
	A = sqrt(gainFactor);
	w0 = 2*$pi*freq/srate;
	sin_w0 = sin(w0);
	cos_w0 = cos(w0);

	Q = 0.5/sinh(log(2)*0.5*BW*w0/sin_w0);
	alpha = sin_w0*0.5/Q;
	sqrtA2alpha = 2*sqrt(A)*alpha;

	inv_a0 = 1/((A + 1) - (A - 1)*cos_w0 + sqrtA2alpha);
	obj[0/*FILTER:A1*/] = 2*((A - 1) - (A + 1)*cos_w0)*inv_a0;
	obj[1/*FILTER:A2*/] = ((A + 1) - (A - 1)*cos_w0 - sqrtA2alpha)*inv_a0;
	obj[2/*FILTER:B0*/] = A*((A + 1) + (A - 1)*cos_w0 + sqrtA2alpha)*inv_a0;
	obj[3/*FILTER:B1*/] = -2*A*((A - 1) + (A + 1)*cos_w0)*inv_a0;
	obj[4/*FILTER:B2*/] = A*((A + 1) + (A - 1)*cos_w0 - sqrtA2alpha)*inv_a0;
);

function filter_buffer_sample(obj, x0) local(y0) (
	y0 = obj[2/*FILTER:B0*/]*x0 + obj[3/*FILTER:B1*/]*obj[5/*FILTER:X1*/] + obj[4/*FILTER:B2*/]*obj[6/*FILTER:X2*/] - obj[0/*FILTER:A1*/]*obj[7/*FILTER:Y1*/] - obj[1/*FILTER:A2*/]*obj[8/*FILTER:Y2*/];
	obj[8/*FILTER:Y2*/] = obj[7/*FILTER:Y1*/];
	obj[7/*FILTER:Y1*/] = y0;
	obj[6/*FILTER:X2*/] = obj[5/*FILTER:X1*/];
	obj[5/*FILTER:X1*/] = x0;
	y0;
);
