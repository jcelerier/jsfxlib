/* Generated by: JSFX Pre-Processor (https://github.com/geraintluff/jsfx-preprocessor) */
desc:Hammer And Chord (Polyphonic Synth/Resonator by Geraint Luff)

in_pin:Left
in_pin:Right
out_pin:Left
out_pin:Right

slider1:decay_wavelengths_on=50<1,1000,1>-Decay (on)
slider2:release_ms=50<1,100,1>-Release (ms)
slider3:portamento_ms=5<0,100,1>-Portamento (ms)
slider4:impulse_brightness=30<0.1,100,0.01>-Impulse brightness
slider5:impulse_velocity=1<0,2,0.01>-Impulse velocity
slider6:resonator_scaling=0.1<0,1,0.01>-Input scaling (sustain, impulse)
slider7:timbre_inverse_gain=0<-1,1>-Timbre polarity
slider8:impulse_amp=1<0,1,0.01>-Impulse volume
slider9:decay_period=1<0,1,0.01>-Decay period
slider10:damping_factor=1<0,5,0.01>-Damping
slider11:filter_freq=2000<500,16000,1>-Damping freq
slider12:ring_mod=0<0,1,1{off,on}>-Input Deo-tonal ring mod
slider13:detune_lr_cents=0<-30,30,1>-Detuning (L/R)
slider14:stereo_width=0.5<0.1,1,0.01>-Stereo Width
slider15:damping_freq_velocity=0<-3,3,0.01>-Decay velocity
slider16:input_decay_ms=0<0,1000,1>-Input decay
slider17:input_decay_velocity_curve=0.5<0,1,0.01>-Input decay velocity-sensitivity
slider18:input_velocity_curve=0.5<0,1,0.01>-Input gain velocity-sensitivity
slider19:midi_channel_filter=0<0,16,1{all,Channel 0,Channel 1,Channel 2,Channel 3,Channel 4,Channel 5,Channel 6,Channel 7,Channel 8,Channel 9,Channel 10,Channel 11,Channel 12,Channel 13,Channel 14,Channel 15,Channel 16}>-MIDI channel filter
slider20:tuning_mode=0<0,1,1{linear,all-pass}>-Resonator mode
slider21:timbre_wavelength_offset=0.5<0, 0.5>-Timbre tone

import ui-lib.jsfx-inc
import synth-framework-obj.jsfx-inc
import synth-framework-obj-ui.jsfx-inc
import delay-utils.jsfx-inc
import filter-utils.jsfx-inc

@init

gfx_ext_retina = 1;

function tanh(x) (
	x >= 20 ? (
		1;
	) : x <= -20 ? (
		-1;
	) : (
		(exp(2*x) - 1)/(exp(2*x) + 1);
	);

);

freemem = 0;

MAX_INPUT_DELAY_SAMPLES = srate;
freemem = input0_delay.delay_setup(freemem, MAX_INPUT_DELAY_SAMPLES);
freemem = input1_delay.delay_setup(freemem, MAX_INPUT_DELAY_SAMPLES);

min_freq = 10;
max_delay_samples = srate/min_freq;
min_delay_samples = 4.1;
delay_buffer_length = delay_size(max_delay_samples);

freemem = ui_setup(freemem);
freemem = synth_setup(freemem, delay_buffer_length*2, 16);
synth_setup_each(synth1);
synth_setup_each(synth2);
synth_setup_each(synth3);
synth_setup_each(synth4);
synth_setup_each(synth5);
synth_setup_each(synth6);
synth_setup_each(synth7);
synth_setup_each(synth8);
synth_setup_each(synth9);
synth_setup_each(synth10);
synth_setup_each(synth11);
synth_setup_each(synth12);
synth_setup_each(synth13);
synth_setup_each(synth14);
synth_setup_each(synth15);
synth_setup_each(synth16);

delay_samples = max_delay_samples;
delay_samples_target = max_delay_samples;

latest_release = 0;

@block

midi_channel_filter ? (
	midi_channel_filter_enabled = 1;
	midi_channel_filter_channel = midi_channel_filter - 1;
) : (
	midi_channel_filter_enabled = 0;
);

input_delay_samples = min(MAX_INPUT_DELAY_SAMPLES, synth_pdc_delay());
pdc_bot_ch = 0;
pdc_top_ch = 2;
pdc_delay = input_delay_samples;

// synth framework boilerplate
synth_preblock_each(synth1)
&& synth_preblock_each(synth2)
&& synth_preblock_each(synth3)
&& synth_preblock_each(synth4)
&& synth_preblock_each(synth5)
&& synth_preblock_each(synth6)
&& synth_preblock_each(synth7)
&& synth_preblock_each(synth8)
&& synth_preblock_each(synth9)
&& synth_preblock_each(synth10)
&& synth_preblock_each(synth11)
&& synth_preblock_each(synth12)
&& synth_preblock_each(synth13)
&& synth_preblock_each(synth14)
&& synth_preblock_each(synth15)
&& synth_preblock_each(synth16);
synth_block();
synth_block_each(synth1)
&& synth_block_each(synth2)
&& synth_block_each(synth3)
&& synth_block_each(synth4)
&& synth_block_each(synth5)
&& synth_block_each(synth6)
&& synth_block_each(synth7)
&& synth_block_each(synth8)
&& synth_block_each(synth9)
&& synth_block_each(synth10)
&& synth_block_each(synth11)
&& synth_block_each(synth12)
&& synth_block_each(synth13)
&& synth_block_each(synth14)
&& synth_block_each(synth15)
&& synth_block_each(synth16);

portamento_time = portamento_ms/1000;
delay_samples_slew_factor = portamento_time ? (1 - exp(-1/srate/portamento_time)) : 1;
decay_factor_on = exp(-1/decay_wavelengths_on);
decay_reference_freq = 220;
detune_l_factor = pow(2, detune_lr_cents/1200);
detune_r_factor = pow(2, -detune_lr_cents/1200);

// Impulse timbre parameters
impulse_length_samples = 0.01*srate;

release_samples = 2*release_ms/1000*srate;

resonator_gain = 0;

!filter_freq ? (
	filter_freq = 2000;
);
filter_bandwidth = 2;

timbre_wavelength_offset_step = (timbre_wavelength_offset - timbre_wavelength_offset_actual)/samplesblock;

@sample

latest_note = -1;
timbre_wavelength_offset_actual += timbre_wavelength_offset_step;

function impulse(note*) local(attack, phase, amp) (
	attack = synth_attack(note);
	attack >= 0 && attack < impulse_length_samples ? (
		phase = attack/impulse_length_samples - 0.5;
		phase2 = impulse_brightness*phase*synth_velocity(note)/127;
		amp = note.impulse_amp*(1 + 0.25*impulse_brightness)/(0.1 + impulse_brightness);
		tanh(phase2*2*$pi)*(0.5 + 0.5*cos(phase*2*$pi))*amp;
	) : 0;
);

inv_stereo_factor = 0.5/stereo_width;


inputM = (spl1 + spl0)*0.5;
inputS = (spl1 - spl0)*inv_stereo_factor;
input0_delay.delay_input(inputM - inputS);
input1_delay.delay_input(inputM + inputS);
input0 = input0_delay.delay_output_samples(inputM - inputS);
input1 = input1_delay.delay_output_samples(inputM + inputS);

output0 = output1 = 0;

function process_note(note*) (
	synth_sample_each(note) ? (
		midi_channel_filter_enabled && synth_channel(note) !== midi_channel_filter_channel ? (
			synth_stop(note);
		) : (
			note_min_release = min(note_min_release, synth_release(note));
			synth_needs_init(note) ? (
				/*
				note.input_delay_samples = floor(
					synth_channel(note)*(
						per_channel_delay_beats*srate*60/tempo
						+ per_channel_delay_seconds*srate
					)
					+ input_delay_samples
					+ 0.5
				);
				*/

				mem = note;
				note.delay_samples = max(min_delay_samples, min(max_delay_samples, srate/synth_freq(note)));
				mem = note.buffer0.delay_init(mem, max_delay_samples);
				mem = note.buffer1.delay_init(mem, max_delay_samples);

				decay_factor = pow(decay_factor_on, 1 + 2*(1 - synth_velocity(note)/127));
				decay_normalisation = decay_reference_freq/synth_freq(note);
				decay_normalisation = 1 + (decay_normalisation - 1)*decay_period;
				decay_factor = pow(decay_factor, decay_normalisation);
				resonator_gain = sqrt(1 - abs(decay_factor_on));
				resonator_gain += (1 - resonator_gain)*resonator_scaling;
				note.resonator_gain = resonator_gain;

	 			filter_freq_vel = filter_freq*pow(2, damping_freq_velocity*(synth_velocity(note)*2/127 - 1));
				filter_freq_vel = min(srate*0.45, filter_freq_vel);
				filter_gain = pow(abs(decay_factor), damping_factor*4);
				note.filter0.filter_init();
				note.filter0.filter_highshelf_gainband(filter_freq_vel, filter_gain, filter_bandwidth);
				note.filter1.filter_init();
				note.filter1.filter_highshelf_gainband(filter_freq_vel, filter_gain, filter_bandwidth);

				note.decay_factor = decay_factor;

				note.impulse_amp = impulse_amp*pow(synth_velocity(note)/127, impulse_velocity);
				pan = 0.5 + (rand() - 0.5)*0.05;
				note.pan_left = (1 - pan)*2;
				note.pan_right = pan*2;

				note.input_decay_gain = pow(synth_velocity(note)/127, input_velocity_curve);
				input_decay_samples = input_decay_ms*0.001*srate*pow(synth_velocity(note)/127, input_decay_velocity_curve);
				input_decay_factor = input_decay_samples ? exp(-1/input_decay_samples) : 1;
				note.input_decay_factor = input_decay_factor;

				mod_filter_freq = synth_freq(note)*0.5;
				note.mod_gain = sqrt(srate/mod_filter_freq);
				note.mod_filter0.filter_init();
				note.mod_filter0.filter_lowpass(mod_filter_freq, 0.5);
				note.mod_filter1.filter_init();
				note.mod_filter1.filter_lowpass(mod_filter_freq, 0.5);
			);
			synth_release(note) >= release_samples ? (
				synth_stop(note);
			) : (
				decay_factor = note.decay_factor;
				resonator_gain = note.resonator_gain;
				impulse_value = impulse(note);

				delay_samples_target = max(min_delay_samples, min(max_delay_samples, srate/synth_freq(note)));
				delay_samples = note.delay_samples;
				delay_samples += (delay_samples_target - delay_samples)*delay_samples_slew_factor;
				delay_freq = srate/delay_samples;
				note.delay_samples = delay_samples;

				tuning_mode ? (
					delayed0 = note.buffer0.delay_output_allpass(delay_samples*detune_l_factor - 1);
					delayed1 = note.buffer1.delay_output_allpass(delay_samples*detune_r_factor - 1);
				) : (
					delayed0 = note.buffer0.delay_output_linear(delay_samples*detune_l_factor - 1);
					delayed1 = note.buffer1.delay_output_linear(delay_samples*detune_r_factor - 1);
				);
				delayed0 = note.filter0.filter_sample(delayed0);
				delayed1 = note.filter1.filter_sample(delayed1);

				input_envelope = note.input_decay_gain = note.input_decay_gain*note.input_decay_factor;
				//excitation0 = input0_delay.delay_output_samples(note.input_delay_samples)*input_envelope;
				//excitation1 = input1_delay.delay_output_samples(note.input_delay_samples)*input_envelope;
				excitation0 = input0_delay.delay_output_samples(input_delay_samples)*input_envelope;
				excitation1 = input1_delay.delay_output_samples(input_delay_samples)*input_envelope;
				ring_mod ? (
					noise = (rand()*2 - 1)*note.mod_gain;
					excitation0 = note.mod_filter0.filter_sample(noise)*excitation0;
					noise = (rand()*2 - 1)*note.mod_gain;
					excitation1 = note.mod_filter1.filter_sample(noise)*excitation1;
				);
				excitation0 = impulse_value*note.pan_left + excitation0*resonator_gain + delayed0*decay_factor;
				excitation1 = impulse_value*note.pan_right + excitation1*resonator_gain + delayed1*decay_factor;
				note.buffer0.delay_input(excitation0);
				note.buffer1.delay_input(excitation1);

				timbre_samples = floor(delay_samples*timbre_wavelength_offset_actual + 0.5);
				timbre0 = note.buffer0.delay_output_samples(timbre_samples);
				timbre1 = note.buffer1.delay_output_samples(timbre_samples);

				synth_release(note) > 0 ? (
					release_ratio = synth_release(note)/release_samples;
					release_ratio_remainder = 1 - release_ratio;
					env = release_ratio_remainder*release_ratio_remainder*release_ratio_remainder;
					output0 += (delayed0 - timbre0*timbre_inverse_gain)*env;
					output1 += (delayed1 - timbre1*timbre_inverse_gain)*env;
				) : (
					output0 += delayed0 - timbre0*timbre_inverse_gain;
					output1 += delayed1 - timbre1*timbre_inverse_gain;
				);
			);
		);
	);
	synth_continue(note);
);

synth_sample();

process_note(synth1)
&& process_note(synth2)
&& process_note(synth3)
&& process_note(synth4)
&& process_note(synth5)
&& process_note(synth6)
&& process_note(synth7)
&& process_note(synth8)
&& process_note(synth9)
&& process_note(synth10)
&& process_note(synth11)
&& process_note(synth12)
&& process_note(synth13)
&& process_note(synth14)
&& process_note(synth15)
&& process_note(synth16);

outputM = (output1 + output0)*0.5;
outputS = (output1 - output0)*0.5;

spl0 = outputM - outputS*stereo_width;
spl1 = outputM + outputS*stereo_width;

@gfx 750 390

function labelled_default_dial(value, low, high, bias, label, format_text, default) local(height) (
	height = min(ui_height()/2, 50);
	ui_push_height(height);
		value = control_dial(value, low, high, bias);
		ui_click() && ui_clickcount() == 2 ? (
			value = default;
		);
	ui_pop(height);
	ui_push_above(height);
		ui_align(0.5, 0.7);
		ui_text(label);
	ui_pop(height);
	ui_push_below(height);
		ui_align(0.5, 0.3);
		ui_textnumber(value, format_text);
	ui_pop();
	value;
);

function labelled_switch(value, label, format_text) local(height) (
	height = min(ui_height()/2, 50);
	ui_push_height(height);
		ui_push_heighttext(-1);
			ui_push_width(50);
				value = control_switch(value);
			ui_pop();
		ui_pop();
	ui_pop(height);
	ui_push_above(height);
		ui_align(0.5, 0.7);
		ui_text(label);
	ui_pop(height);
	ui_push_below(height);
		ui_align(0.5, 0.3);
		ui_text(format_text);
	ui_pop();
	value;
);

control_start("main", "tron");

ui_screen() == "main" ? (
	control_navbar("Hammer And Chord (polyphonic resonator)", "config", "synth.config");

	ui_split_topratio(0.5);
		ui_split_leftratio(3/9);
			control_group("Envelope");
			ui_split_leftratio(1/3);
				decay_wavelengths_on = labelled_default_dial(decay_wavelengths_on, 1, 1000, 4, "Decay", "", 50);
			ui_split_next();
				decay_period = labelled_default_dial(decay_period, 0, 1, 0, "Metric", decay_period < 0.5 ? "wavelength" : "constant time", 1);
			ui_split_next();
				release_ms = labelled_default_dial(release_ms, 0, 500, 4, "Release", "%ims", 50);
			ui_pop();
		ui_pop();

		ui_split_leftratio(3/6);
			control_group("Damping");
			ui_split_leftratio(1/3);
				filter_freq = labelled_default_dial(filter_freq, 500, 16000, log(16000/500), "Freq", "%iHz", 2000);
			ui_split_next();
				damping_factor = labelled_default_dial(damping_factor, 0, 5, 1.5, "Amount", "", 1);
			ui_split_next();
				damping_freq_velocity = labelled_default_dial(damping_freq_velocity, -3, 3, 0, "Velocity", "", 0);
			ui_pop();
		ui_pop();

		ui_split_leftratio(3/3);
			control_group("Impulse");
			ui_split_leftratio(1/3);
				impulse_brightness = labelled_default_dial(impulse_brightness, 0.1, 100, log(1000), "Brightness", "", 30);
			ui_split_next();
				impulse_amp = labelled_default_dial(impulse_amp, 0, 1, log(100), "Volume", "", 1);
			ui_split_next();
				impulse_velocity = labelled_default_dial(impulse_velocity, 0, 2, 0, "Velocity", "", 1);
			ui_pop();
		ui_pop();
	ui_split_next();
		ui_split_leftratio(5/10);
			control_group("Audio Input");
			ui_split_leftratio(1/5);
				resonator_scaling = labelled_default_dial(resonator_scaling, 0, 1, 0, "Type", resonator_scaling < 0.25 ? "continuous" : resonator_scaling < 0.75 ? "hybrid" : "impulse", 0.1);
			ui_split_next();
				input_decay_ms = labelled_default_dial(input_decay_ms, 0, 1000, 3, "Decay", input_decay_ms ? "%ims" : "infinite", 0);
			ui_split_next();
				input_decay_velocity_curve = labelled_default_dial(input_decay_velocity_curve, 0, 1, 0, "Decay", "Velocity", 0.5);
			ui_split_next();
				input_velocity_curve = labelled_default_dial(input_velocity_curve, 0, 1, 0, "Gain", "Velocity", 0.5);
			ui_split_next();
				ring_mod = labelled_switch(ring_mod, "De-tonal", ring_mod ? "on" : "off");
			ui_pop();
		ui_pop();

		ui_split_leftratio(3/5);
			control_group("Resonator");
			ui_split_leftratio(1/3);
				tuning_mode = labelled_switch(tuning_mode, "Interp", tuning_mode ? "all-pass" : "linear");
			ui_split_next();
				timbre_inverse_gain = labelled_default_dial(timbre_inverse_gain, 1, -1, 0, "Timbre", timbre_inverse_gain < 0 ? "positive" : timbre_inverse_gain > 0 ? "negative" : "off", 0);
			ui_split_next();
				timbre_wavelength_offset = labelled_default_dial(timbre_wavelength_offset, 0.01, 0.5, 0, "Tone", "", 0.5);
			ui_pop();
		ui_pop();

		ui_split_leftratio(2/2);
			control_group("Stereo");
			ui_split_leftratio(1/2);
				detune_lr_cents = labelled_default_dial(detune_lr_cents, -30, 30, 0, "Detune", "%ict", 0);
			ui_split_next();
				stereo_width = labelled_default_dial(stereo_width, 0.1, 1, 0.45, "Width", "", 0.5);
			ui_pop();
		ui_pop();
	ui_pop();
) : synth_ui_system() || ui_system();

@serialize

preset_version = 2;
file_var(0, preset_version);

preset_version > 2 ? (
	ui_error("Preset is from newer version - things might not sound right.\n\nUpdate Hammer and Chord to fix this.");
);

synth_serialize(preset_version < 2);
