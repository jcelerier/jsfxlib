desc:Pulsar - Drum Synth (by Geraint Luff)

slider1:clip_limit=1<0.0001,0.1,0.0001>Clip

import ui-lib.jsfx-inc
import synth-framework.jsfx-inc

@init

MAX_PARAM_SPECTRUM_SIZE = 32768;

options_sample_length = 32768;

freemem = 0;
freemem = (fftblock = freemem) + options_sample_length*2;
freemem = (fftblock2 = freemem) + options_sample_length*2;
freemem = (impulse = freemem) + options_sample_length;

freemem = ui_setup(freemem);
freemem = synth_setup(freemem, 0);
freemem = (spectrum_db = freemem) + MAX_PARAM_SPECTRUM_SIZE;

!param_spectrum_size ? (
	param_spectrum_size = 1000;
	param_spectrum_lowfreq = 10;
	param_spectrum_highfreq = 20000;

	i = 0;
	while (i < param_spectrum_size) (
		r = i/param_spectrum_size;
		spectrum_db[i] = 0*sin(r*60) - 10*r + 20 + 10*(-abs((r - 0.2)/.1));
		i += 1;
	);
);

impulse[0] = 1;
i = 0;
while (i < options_sample_length) (
	impulse[i] = 0;
	impulse[i] = rand() - rand();
	//impulse[i] *= max(0, 1 - i/options_sample_length*100);
	i += 1;
);
ready_to_iterate = 1;

@block

synth_block();

function minimum_phase(fftblock, fftsize) local(i, r, f, real, imag, mag, spectrum_i, db) (
	i = 0;
	while (i < fftsize) (
		real = fftblock[2*i];
		imag = fftblock[2*i + 1];
		fftblock[2*i] = log(real*real + imag*imag)/2;
		fftblock[2*i + 1] = 0;
		i += 1;
	);

	fft_ipermute(fftblock, fftsize);
	ifft(fftblock, fftsize);

	i = 1;
	fftblock[0] *= 1;
	fftblock[1] = 0;
	while (i < fftsize*0.5) (
		i2 = fftsize - i;
		fftblock[2*i] += fftblock[2*i2];
		fftblock[2*i + 1] += fftblock[2*i2 + 1];
		fftblock[2*i] *= 1;
		fftblock[2*i + 1] *= 1;
		i += 1;
	);
	fftblock[fftsize] = 0;
	fftblock[fftsize + 1] = 0;
	while (i < fftsize) (
		fftblock[2*i] = 0;
		fftblock[2*i + 1] = 0;
		i += 1;
	);

	fft(fftblock, fftsize);
	fft_permute(fftblock, fftsize);

	i = 0;
	while (i < fftsize) (
		real = fftblock[2*i]/fftsize;
		imag = fftblock[2*i + 1]/fftsize;
		mag = exp(real);
		fftblock[2*i] = cos(imag)*mag;
		fftblock[2*i + 1] = sin(imag)*mag;
		i += 1;
	);
);

function iterate() local(i, fftsize, real, imag, real2, imag2, mag, targetmag factor) (
	fftsize = options_sample_length;

	i = 0;
	while (i < fftsize) (
		fftblock2[2*i] = impulse[i];
		fftblock2[2*i + 1] = 0;
		i += 1;
	);
	fft(fftblock2, fftsize);
	fft_permute(fftblock2, fftsize);

	i = 0;
	while (i < fftsize) (
		r = (i + 0.5)/fftsize;
		f = srate*min(r, 1 - r);
		spectrum_i = (f <= param_spectrum_lowfreq) ? (
			0
		) : (f >= param_spectrum_highfreq) ? (
			param_spectrum_size - 1;
		) : (
			floor(param_spectrum_size*log(f/param_spectrum_lowfreq)/log(param_spectrum_highfreq/param_spectrum_lowfreq));
		);
		db = spectrum_db[spectrum_i];
		targetmag = pow(10, max(-100, db/20));;

		real = fftblock2[2*i];
		imag = fftblock2[2*i + 1];
		mag = max(pow(10, -100/20), sqrt(real*real + imag*imag));

		fftblock[2*i] = targetmag/mag;
		fftblock[2*i + 1] = 0;
		i += 1;
	);

	minimum_phase(fftblock, fftsize);

	i = 0;
	while (i < fftsize) (
		real = fftblock[2*i];
		imag = fftblock[2*i + 1];
		real2 = fftblock2[2*i];
		imag2 = fftblock2[2*i + 1];

		fftblock2[2*i] = real*real2 - imag*imag2;
		fftblock2[2*i + 1] = real*imag2 + real2*imag;

		i += 1;
	);

	fft_ipermute(fftblock2, fftsize);
	ifft(fftblock2, fftsize);

	i = 0;
	while (i < fftsize) (
		impulse[i] = fftblock2[2*i]/fftsize;
		i += 1;
	);
);

ready_to_iterate ? (
	ready_to_iterate = 0;

	loop(10,
		i = 0;
		while (i < options_sample_length) (
			clip = clip_limit*max(0, 1 - i/options_sample_length*0);
			impulse[i] = max(-clip, min(clip, impulse[i]));
			i += 1;
		);

		iterate();

		i = 0;
		while (i < options_sample_length) (
			impulse[i] *= max(0, 1 - i/options_sample_length*2);
			i += 1;
		);

		silence_samples = -1;
		limit = 0.0001;
		i = 0;
		while (silence_samples < 0 && i < options_sample_length) (
			abs(impulse[i]) > limit ? (
				silence_samples = i;
			);
			i += 1;
		);

		silence_samples > 0 ? (
			i = 0;
			while (i + silence_samples < options_sample_length) (
				impulse[i] = impulse[i + silence_samples];
				i += 1;
			);
			while (i < options_sample_length) (
				impulse[i] = 0;
				i += 1;
			);
		);
	);
);

@sample

synth_sample();

note = synth_note_first();
while (note > 0) (
	synth_needs_init(note) ? (
		layer = note;
	);

	synth_sustain_release() > 0 ? (
		synth_stop(note);
	);

	note = synth_note_next(note);
);

xi += 1;
xi >= options_sample_length ? (
	xi = 0;
	ready_to_iterate = 1;
);
spl0 = spl1 = impulse[xi];

@gfx 400 250

control_start("main", "default");

ui_screen() == "main" ? (
	ui_split_topratio(1/3);
		control_background_technical();
		ui_graph_step(spectrum_db, param_spectrum_size, 1, -100, 20);
		control_finish_technical();
	ui_split_next();
		control_background_technical();
		debug.scale2 = ui_graph_step(impulse, 1000, 1, 0, 0);
		control_finish_technical();
	ui_split_next();
		control_background_technical();
		debug.scale3 = ui_graph_step(impulse, options_sample_length, 1, 0, 0);
		control_finish_technical();
	ui_pop();
) : ui_system();
