desc:Tevio Dual Reverb
Author: Tevio
version: 2018/06/27
changelog: Initial release
Author URI: 
Repository: 
Repository URI:



slider1:0<-120,0,1>Dry
slider2:-6<-120,0,1>Wet
slider3:50<50,199,1>Damping (%)
slider4:0.125<0.125,1,0.01>Time Left
slider5:0.125<0.125,1,0.01>Time Right
slider6:1<0,1,1{Dual,Link}>Time control
slider7:50<50,3000,10>Hpf
slider8:14000<800,14000,50>Lpf
slider9:0<-100,100,0.1>Pan Rev
slider10:0<-18,18,0.2>Volume Out (dB)


@init

 hpf = 0;
  gain1 = 0;
  freq1 = slider7;
  a1f = 1;
  s1 = 1;
  q1 = 1 / (sqrt((a1f + 1/a1f)*(1/s1 - 1) + 2));
  w01 = 2 * $pi * freq1/srate;
  cosw01 = cos(w01);
  sinw01 = sin(w01);
  alpha1 = sinw01 / (2 * q1);

  b01 = (1 + cosw01)/2;
  Fb11 = -(1 + cosw01);
  b21 = (1 + cosw01)/2;
  a01 = 1 + alpha1;
  a11 = -2 * cosw01;
  a21 = 1 - alpha1;
  b01 /= a01;
  Fb11 /= a01;
  b21 /= a01;
  a11 /= a01;
  a21 /= a01;

  lpf = 0;
  gain3 = 0;
  freq3 = 22000;
  a3f = 10^(gain3/40);
  s3 = 2;
  q3 = 1 / (sqrt((a3f + 1/a3f)*(1/s3 - 1) + 2));
  w03 = 2 * $pi * freq3/srate;
  cosw03 = cos(w03);
  sinw03 = sin(w03);
  alpha3 = sinw03 / (2 * q3);

  b03 = (1 - cosw03)/2;
  b13 = (1 - cosw03);
  b23 = (1 - cosw03)/2;
  a03 = 1 + alpha3;
  a13 = -2 * cosw03;
  a23 = 1 - alpha3;
  b03 /= a03;
  b13 /= a03;
  b23 /= a03;
  a13 /= a03;
  a23 /= a03;

  gain = 1;

a0_pos = 0;
a1_pos = 0;
a2_pos = 0;
a3_pos = 0;
a4_pos = 0;
a5_pos = 0;
a6_pos = 0;
tmp = 0;
t = 0;

a0r_pos = 0;
a1r_pos = 0;
a2r_pos = 0;
a3r_pos = 0;
a4r_pos = 0;
a5r_pos = 0;
a6r_pos = 0;
tmpr = 0;
tr = 0;


AMP_dB = 8.68588963806504;
src_pan = tgt_pan = 0.01*slider9;


@slider


volumeout=10^((slider10/20)+0.001);


control = slider6;
control_l = slider4;
control_r = slider5;

wet = exp(slider2/8.65617);
dry = exp(slider1/8.65617);
g = 1-slider3/100;

a0 = 0;
a0_len = (srate*8*control_l/1000)|0;
a0_g = 0.3;

a1 = a0+a0_len+1;
a1_len = (srate*12*control_l/1000)|0;
a1_g = 0.3;

a2 = a1+a1_len+1;
a2_len = (srate*87*control_l/1000)|0;
a2_g = 0.5;

a3 = a2+a2_len+1;
a3_len = (srate*62*control_l/1000)|0;
a3_g = 0.25;

a4 = a3+a3_len+1;
a4_len = (srate*120*control_l/1000)|0;
a4_g = 0.5;

a5 = a4+a4_len+1;
a5_len = (srate*76*control_l/1000)|0;
a5_g = 0.25;

a6 = a5+a5_len+1;
a6_len = (srate*30*control_l/1000)|0;
a6_g = 0.25;


rndcoef = 50;

control == 1 ? (


a0r = a6+a6_len+1;
a0r_len = ((srate*8*control_l/1000)|0)+rndcoef;

a1r = a0r+a0r_len+1;
a1r_len = ((srate*12*control_l/1000)|0)-rndcoef;

a2r = a1r+a1r_len+1;
a2r_len = ((srate*87*control_l/1000)|0)+rndcoef;

a3r = a2r+a2r_len+1;
a3r_len = ((srate*62*control_l/1000)|0)-rndcoef;

a4r = a3r+a3r_len+1;
a4r_len = ((srate*120*control_l/1000)|0)+rndcoef;

a5r = a4r+a4r_len+1;
a5r_len = ((srate*76*control_l/1000)|0)-rndcoef;

a6r = a5r+a5r_len+1;
a6r_len = ((srate*30*control_l/1000)|0)+rndcoef;

) : (

a0r = a6+a6_len+1;
a0r_len = ((srate*8*control_r/1000)|0)+rndcoef;

a1r = a0r+a0r_len+1;
a1r_len = ((srate*12*control_r/1000)|0)-rndcoef;

a2r = a1r+a1r_len+1;
a2r_len = ((srate*87*control_r/1000)|0)+rndcoef;

a3r = a2r+a2r_len+1;
a3r_len = ((srate*62*control_r/1000)|0)-rndcoef;

a4r = a3r+a3r_len+1;
a4r_len = ((srate*120*control_r/1000)|0)+rndcoef;

a5r = a4r+a4r_len+1;
a5r_len = ((srate*76*control_r/1000)|0)-rndcoef;

a6r = a5r+a5r_len+1;
a6r_len = ((srate*30*control_r/1000)|0)+rndcoef;

);

c = exp(-2*3.14*2600/srate);

/* Filter */

 freq1 = slider7;
  freq3 = slider8;
  gain = 1;

  slider7 == 40 ? hpf = 0 : hpf = 1;
  slider8 == 15000 ? lpf = 0 : lpf = 1;

  a1f = 1;
  s1 = 1;
  q1 = 1 / (sqrt((a1f + 1/a1f)*(1/s1 - 1) + 2));
  w01 = 2 * $pi * freq1/srate;
  cosw01 = cos(w01);
  sinw01 = sin(w01);
  alpha1 = sinw01 / (2 * q1);

  b01 = (1 + cosw01)/2;
  Fb11 = -(1 + cosw01);
  b21 = (1 + cosw01)/2;
  a01 = 1 + alpha1;
  a11 = -2 * cosw01;
  a21 = 1 - alpha1;
  b01 /= a01;
  Fb11 /= a01;
  b21 /= a01;
  a11 /= a01;
  a21 /= a01;

  a3f = 1;
  s3 = 1;
  q3 = 1 / (sqrt((a3f + 1/a3f)*(1/s3 - 1) + 2));
  w03 = 2 * $pi * freq3/srate;
  cosw03 = cos(w03);
  sinw03 = sin(w03);
  alpha3 = sinw03 / (2 * q3);

  b03 = (1 - cosw03)/2;
  b13 = (1 - cosw03);
  b23 = (1 - cosw03)/2;
  a03 = 1 + alpha3;
  a13 = -2 * cosw03;
  a23 = 1 - alpha3;
  b03 /= a03;
  b13 /= a03;
  b23 /= a03;
  a13 /= a03;
  a23 /= a03;

  
  tgt_pan = 0.01*slider9;
  
@block
  
  d_pan = (tgt_pan-src_pan)/samplesblock;
tpan = src_pan;
src_pan = tgt_pan;
  

@sample


s_inl = spl0;

in = spl0 + tmp*g;

// ---- AP 1
a0_in = in;
a0_out = -a0_in*a0_g + a0[a0_pos];
a0[a0_pos] = a0_in + a0_out*a0_g;
(a0_pos+=1) >= a0_len ? a0_pos = 0;

// ---- AP 2
a1_in = a0_out;
a1_out = -a1_in*a1_g + a1[a1_pos];
a1[a1_pos] = a1_in + a1_out*a1_g;
(a1_pos+=1) >= a1_len ? a1_pos = 0;

// ---- AP 3
a2_in = a1_out;
a2_out = -a2_in*a2_g + a3_out;
a3_in = a2_in + a2_out*a2_g;

// --> nested
  a3_out = -a3_in*a3_g + a3[a3_pos];
  a3[a3_pos] = a3_in + a3_out*a3_g;
  (a3_pos+=1) >= a3_len ? a3_pos = 0;
  
  a2[a2_pos] = a3_out;
  (a2_pos+=1) >= a2_len ? a2_pos = 0;
  a3_out = a2[a2_pos];

// <-- nested


// ---- AP 5
a4_in = a2_out;
a4_out = -a4_in*a4_g + a6_out;
a5_in = a4_in + a4_out*a4_g;

// --> nested
  a5_out = -a5_in*a5_g + a5[a5_pos];
  a5[a5_pos] = a5_in + a5_out*a5_g;
  (a5_pos+=1) >= a5_len ? a5_pos = 0;
  
  a6_in = a5_out;
  a6_out = -a6_in*a6_g + a6[a6_pos];
  a6[a6_pos] = a6_in + a6_out*a5_g;
  (a6_pos+=1) >= a6_len ? a6_pos = 0;

  a4[a4_pos] = a6_out;
  (a4_pos+=1) >= a4_len ? a4_pos = 0;
  a6_out = a4[a4_pos];

// <-- nested


tmp = a4_out;
tmp = (t = tmp + c*(t-tmp));

outl = a1_out*0.34 + a2_out*0.14 + a4_out*0.15;




s_inr = spl1;

in = spl1 + tmpr*g;

// ---- AP 1
a0r_in = in;
a0r_out = -a0r_in*a0_g + a0r[a0r_pos];
a0r[a0r_pos] = a0r_in + a0r_out*a0_g;
(a0r_pos+=1) >= a0r_len ? a0r_pos = 0;

// ---- AP 2
a1r_in = a0r_out;
a1r_out = -a1r_in*a1_g + a1r[a1r_pos];
a1r[a1r_pos] = a1r_in + a1r_out*a1_g;
(a1r_pos+=1) >= a1r_len ? a1r_pos = 0;

// ---- AP 3
a2r_in = a1r_out;
a2r_out = -a2r_in*a2_g + a3r_out;
a3r_in = a2r_in + a2r_out*a2_g;

// --> nested
  a3r_out = -a3r_in*a3_g + a3r[a3r_pos];
  a3r[a3r_pos] = a3r_in + a3r_out*a3_g;
  (a3r_pos+=1) >= a3r_len ? a3r_pos = 0;
  
  a2r[a2r_pos] = a3r_out;
  (a2r_pos+=1) >= a2r_len ? a2r_pos = 0;
  a3r_out = a2r[a2r_pos];

// <-- nested


// ---- AP 5
a4r_in = a2r_out;
a4r_out = -a4r_in*a4_g + a6r_out;
a5r_in = a4r_in + a4r_out*a4_g;

// --> nested
  a5r_out = -a5r_in*a5_g + a5r[a5r_pos];
  a5r[a5r_pos] = a5r_in + a5r_out*a5_g;
  (a5r_pos+=1) >= a5r_len ? a5r_pos = 0;
  
  a6r_in = a5r_out;
  a6r_out = -a6r_in*a6_g + a6r[a6r_pos];
  a6r[a6r_pos] = a6r_in + a6r_out*a5_g;
  (a6r_pos+=1) >= a6r_len ? a6r_pos = 0;

  a4r[a4r_pos] = a6r_out;
  (a4r_pos+=1) >= a4r_len ? a4r_pos = 0;
  a6r_out = a4r[a4r_pos];

// <-- nested


tmpr = a4r_out;
tmpr = (tr = tmpr + c*(tr-tmpr));

outr = a1r_out*0.34 + a2r_out*0.14 + a4r_out*0.15;



/*Filter */

hpf != 0 ? (
  ospl0 = outl;
  outl = b01 * outl + Fb11 * xl11 + b21 * xl21 - a11 * yl11 - a21 * yl21;
  xl21 = xl11;
  xl11 = ospl0;
  yl21 = yl11;
  yl11 = outl;

  ospl1 = outr;
  outr = b01 * outr + Fb11 * xr11 + b21 * xr21 - a11 * yr11 - a21 * yr21;
  xr21 = xr11;
  xr11 = ospl1;
  yr21 = yr11;
  yr11 = outr;
  
  uscitar = outr;
  uscital = outl;
  );

   lpf != 0 ? (
  ospl0 = uscital;
  uscital = b03 * uscital + b13 * xl13 + b23 * xl23 - a13 * yl13 - a23 * yl23;
  xl23 = xl13;
  xl13 = uscital;
  yl23 = yl13;
  yl13 = uscital;

  ospl1 = uscitar;
  uscitar = b03 * uscitar + b13 * xr13 + b23 * xr23 - a13 * yr13 - a23 * yr23;
  xr23 = xr13;
  xr13 = uscitar;
  yr23 = yr13;
  yr13 = uscitar;


  uscital *= gain;
  uscitar *= gain;
  );
  
tpan += d_pan;


adj0 = adj1 = 1;
tpan < 0.0 ? adj1 *= 1.0+tpan;
tpan > 0.0 ? adj0 *= 1.0-tpan;

uscital *= adj0;
uscitar *= adj1;

spl0 = s_inl*dry + uscital*wet;  
spl1 = s_inr*dry + uscitar*wet;

spl0 *= volumeout;
spl1 *= volumeout;
