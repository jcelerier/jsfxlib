desc:Sonic Stereo Mixer v1.0.0 (NovaSonica)
in_pin:01 L
in_pin:02 R
out_pin:01 L
out_pin:02 R
slider1:0<-1,1,0.01>-LF/HF Balance
slider2:0<-180,180,1>-Phase
slider3:0<-1,1,0.01>-Panning
slider4:0<-1,1,0.01>-Width
slider5:0<-24,24,0.05>-Volume
slider6:1<0,1,{-,L}>-Limiter
slider7:1<0,1,{Pan,Bal}>-Pan Mode
slider8:0<0,1,{Off,On}>-MIDI Out
slider9:0<0,4,{Stereo,Inverse,Mix,Left,Right}>-Input
slider10:64<0,127,1>-Volume Left (CC 90)
slider11:64<0,127,1>-Volume Right (CC 91)

/*||||||||||||||||||||||||||||||||||||||*/

@init
/*||||||||||||||||||||||||||||||||||||||*/
GUI_RENDER_GRID_BACKGROUND = 1;
GUI_RENDER_SUBGRID_BACKGROUND = 1;
GUI_RENDER_FRAME = 1;
GUI_RENDER_COMPONENTS = 1;
GUI_RENDER_DEBUG_BORDERS = 0;
THEME_COLORS_SHIFT_HOVER_HUE = 40;
THEME_COLORS_SHIFT_FOREGROUND_HUE = 90;
THEME_COLORS_SHIFT_LABEL_HUE = -70;
THEME_COLORS_SHIFT_DISPLAY_HUE = -20;
THEME_COLORS_MAIN_HUE = 268;
THEME_COLORS_MAIN_SAT = 0.42;
THEME_COLORS_MAIN_LUM = 0.24;
THEME_COLORS_SUB_HUE = 269;
THEME_COLORS_SUB_SAT = 0.38;
THEME_COLORS_SUB_SAT_DIM = THEME_COLORS_SUB_SAT * 0.90;
THEME_COLORS_SUB_LUM = 0.26;
THEME_COLORS_SUB_LUM_DIM = THEME_COLORS_SUB_LUM * 0.90;
THEME_COLORS_SUB_HUE_FG = THEME_COLORS_MAIN_HUE + THEME_COLORS_SHIFT_FOREGROUND_HUE;
THEME_COLORS_SUB_HUE_HOVER = THEME_COLORS_SUB_HUE + THEME_COLORS_SHIFT_FOREGROUND_HUE;
THEME_COLORS_SUB_HUE_LABEL = THEME_COLORS_SUB_HUE + THEME_COLORS_SHIFT_LABEL_HUE;
THEME_COLORS_DISPLAY_HUE = THEME_COLORS_SUB_HUE + THEME_COLORS_SHIFT_DISPLAY_HUE;
THEME_COLORS_DISPLAY_SAT = 0.5;
THEME_COLORS_DISPLAY_LUM = 0.5;
THEME_PADDING_MAIN_LEFT = 7;
THEME_PADDING_MAIN_RIGHT = 7;
THEME_PADDING_MAIN_TOP = 7;
THEME_PADDING_MAIN_BOTTOM = 7;
THEME_PADDING_SUB = 7;
THEME_FRAME_LEFT = 6;
THEME_FRAME_RIGHT = 6;
THEME_FRAME_TOP = 6;
THEME_FRAME_BOTTOM = 6;
BUFFERS_MAX = 100;
GFX_BUFFERS_MAX = 1000;
GFX_BUFFER_SIZE = 11;
UI_BUFFER_SIZE = 25;
GONIOMETER_BUFFER_SIZE = 2048;
UI_BUFFER_ADDR_BASE = 16384*10;
UI_BUFFER_ADDR_MAIN = UI_BUFFER_ADDR_BASE;
UI_BUFFER_ADDR_SUB = UI_BUFFER_ADDR_BASE + UI_BUFFER_SIZE;
GFX_BUFFER_ADDR_BASE = UI_BUFFER_ADDR_BASE + UI_BUFFER_SIZE * 4;
GFX_OFF_SCREEN_ADDR_BASE = GFX_BUFFER_ADDR_BASE + GFX_BUFFERS_MAX * GFX_BUFFER_SIZE;
GONIOMETER_BUFFER_ADDR_BASE = GFX_OFF_SCREEN_ADDR_BASE + GFX_BUFFERS_MAX * GFX_BUFFER_SIZE;
GONIOMETER_BUFFER_ADDR_X = GONIOMETER_BUFFER_ADDR_BASE;
GONIOMETER_BUFFER_ADDR_Y = GONIOMETER_BUFFER_ADDR_X + GONIOMETER_BUFFER_SIZE * 2 + 2;
BUFFER_ADDR_BASE = GONIOMETER_BUFFER_ADDR_Y + GONIOMETER_BUFFER_SIZE * 2 + 2;
BUFFER_ADDR_HEADERS = BUFFER_ADDR_BASE;
BUFFER_ADDR_ADDRESSES = BUFFER_ADDR_BASE + BUFFERS_MAX;
BUFFER_ADDR_DATA = BUFFER_ADDR_BASE + BUFFERS_MAX * 2;

function status()
(
	this.status_last = 0;
	this.status_changed = 0;
	this.samples_played = 0;
);

function status_is_playing()
(
	play_state == 1 || play_state == 5;
);

function status_update()
(
	this.status_changed = play_state != this.status_last;
	this.status_changed ?
	(
		this.samples_played = 0;
	) :
	(
		this.status_is_playing() ?
		(
			this.samples_played += 1;
		);
	);
	this.status_last = play_state;
);
ST.status();
PI = $pi;
TWO_PI = $pi*2;
FOUR_PI = $pi*4;
TENTH_PI = $pi/10;
COS_OF_ONE = cos(1);
SIN_OF_ONE = sin(1);
TWELFTH_ROOT_OF_TWO = 2^(1/12);
TUNING = 440;
phi = 1.6803398875;
phi2 = 1.6803398875+1.6803398875;
phi4 = phi2+phi2;
half_pi = $pi/2;
one_and_a_half_pi = $pi*1.5;
pi2 = 2 * $pi;

function db2vol(db)
(
	10 ^ (db / 20)
);

function clamp(x xMin xMax)
(
	min(xMax,max(xMin,x));
);

function fmod(x y)
local(xy)
(
	xy = x/y;
	abs(floor(xy) - xy)*2;
);

function range(min max)
(
	min < 0 && max > 0 ? abs(min)+abs(max) : max(abs(max), abs(min)) - min(abs(max), abs(min));
);

function normalize(val min max)
local(range)
(
	range = range(min, max);
	val/range - min/range;
);

function denormalize(val min max)
(
	val * range(min, max) + min;
);

function zeroCrossing(min max)
(
	-min / range(min, max);
);

function round(val)
(
	floor(val + 0.5);
);

function round(val stepsize)
(
	round(val/stepsize)*stepsize;
);

function snapNormalizedToEdge(val snapDistance)
local(minSnap maxSnap)
(
	minSnap = snapDistance;
	maxSnap = 1 - snapDistance;
	val <= minSnap ? ( val = 0; );
	val >= maxSnap ? ( val = 1; );
	val;
);

function snapXToPixels(x)
(
	x|0 + snapNormalizedToEdge(x-floor(x), 0.02);
);

function snapYToPixels(y)
(
	y|0 + snapNormalizedToEdge(y-floor(y), 0.02);
);

function snapWidthToPixels(w)
(
	w|0 + snapNormalizedToEdge(w-floor(w), 0.02);
);

function snapHeightToPixels(h)
(
	h|0 + snapNormalizedToEdge(h-floor(h), 0.02) + 1;
);

function signal()
(
	this.sample = 0;
	this.sample_plus_dc = 0;
	this.sample_minus_dc = 0;
	this.average = 0;
	this.variance = 0;
	this.dc_offset = 0;
	this.average_fast = 0;
	this.average_slow = 0;
	this.envelope = 0;
);

function signal_envelope(input w_dc w_env)
(
	this.sample = input;
	this.dc_offset = w_dc * this.sample + (1 - w_dc) * this.v;
	this.envelope = w_env * abs(this.sample - this.dc_offset) + (1 - w_env) * this.envelope;
	this.envelope;
);

function str_format(fmt p_a)
local(str)
(
	str = #;
	sprintf(str, fmt, p_a);
	str;
);

function str_format(fmt p_a p_b)
local(str)
(
	str = #;
	sprintf(str, fmt, p_a, p_b);
	str;
);

function mouseInArea(x y w h)
(
	mouse_y >= y && mouse_y <= (y+h) && (mouse_x >= x && mouse_x <= (x+w));
);

function mouseClickIn(x y w h)
(
	mouse_cap == 1 && mouseInArea(x,y,w,h);
);

function mouseALTClickIn(x y w h)
(
	mouse_cap == 17 && mouseInArea(x,y,w,h);
);

function mouseWheelIn(x y w h)
(
	mouse_wheel != 0 && mouseInArea(x,y,w,h);
);

function hsla(h s l a)
local(m c x r g b quadrant)
(
	h < 0 ?
	(
		h = h + ceil(-h / 360) * 360;
	) :
	(
		h > 360 ?
		(
			h = h - floor(h / 360) * 360;
		);
	);
	h == 0 ? h = 360;
	m = l - (c / 2);
	c = (1 - abs(2 * s - 1)) * s;
	x = c * (1 - abs(fmod((h / 60), 2) - 1));
	r = 0; g = 0; b = 0;
	quadrant = ceil(h / 60);
	quadrant == 1 ? ( r = c; g = x; b = 0; );
	quadrant == 2 ? ( r = x; g = c; b = 0; );
	quadrant == 3 ? ( r = 0; g = c; b = x; );
	quadrant == 4 ? ( r = 0; g = x; b = c; );
	quadrant == 5 ? ( r = x; g = 0; b = c; );
	quadrant == 6 ? ( r = c; g = 0; b = x; );
	gfx_r = r + m;
	gfx_g = g + m;
	gfx_b = b + m;
	gfx_a = a;
);

function blurArea(x y w h n)
(
	loop(n,
		gfx_x = x;
		gfx_y = y;
		gfx_blurto(gfx_x+w, gfx_y+h);
	);
);

function drawString(x y str)
(
	gfx_x = x;
	gfx_y = y;
	gfx_drawstr(str);
);

function drawStringOutlined(x y str hue sat lum a)
(
	hsla(hue,0,0.01,a/2);
	drawString(x-1, y, str);
	drawString(x+1, y, str);
	drawString(x, y-1, str);
	drawString(x, y+1, str);
	drawString(x-1, y-1, str);
	drawString(x+1, y-1, str);
	drawString(x-1, y+1, str);
	drawString(x+1, y+1, str);
	hsla(hue,sat,lum,a);
	drawString(x, y, str);
);

function drawStringLeft(x y w h str hue sat lum a)
(
	gfx_measurestr(str, str_w, str_h);
	drawStringOutlined( x,
	y + h / 2 - str_h / 2,
	str,
	hue,
	sat,
	lum,
	a);
);

function drawStringRight(x y w h str hue sat lum a)
(
	gfx_measurestr(str, str_w, str_h);
	drawStringOutlined( x + w - str_w,
	y + h / 2 - str_h / 2,
	str,
	hue,
	sat,
	lum,
	a);
);

function drawStringCentered(x y w h str hue sat lum a)
(
	gfx_measurestr(str, str_w, str_h);
	drawStringOutlined( x + w / 2 - str_w / 2,
	y + h / 2 - str_h / 2,
	str,
	hue,
	sat,
	lum,
	a);
);

function formatNumber(num precision unit maxLen)
local(str format)
(
	str = #;
	format = #;
	precision > 0 ? sprintf(format, "%%.%d%s%%s", precision, "f")
	: sprintf(format, "%%%d%s%%s", precision, "d");
	sprintf(str, format, num, unit);
	sprintf(format, "%%%ds", maxLen);
	sprintf(str, format, str);
	str;
);

function showToolTip(x y w h str)
local(strW strH bx by bw bh)
(
	mouse_y >= y && mouse_y <= (y+h) && (mouse_x >= x && mouse_x <= (x+w)) ?
	(
		strW = 0;
		strH = 0;
		gfx_measurestr(str, strW, strH);
		bx = mouse_x + 10;
		by = mouse_y - strH - 15;
		bw = strW + 5;
		bh = strH + 5;
		bx < x ? bx = x;
		by < y ? by = y;
		bx + bw >= x+w ? bx = x+w-bw;
		by + bh >= y+h ? by = y+h-bh;
		blurArea(bx, by, bw, bh, 16);
		gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 0.5;
		gfx_rect(bx, by, bw, bh);
		gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 1;
		gfx_rect(bx-1, by-1, bw+2, bh+2, -1);
		drawString(bx+2.5, by+2.5, str);
	);
);

function blit_prepare_display(hue sat lum alpha)
local(last_h last_s last_l last_a)
(
	last_h != hue || last_s != sat || last_l != lum || last_a != alpha ?
	(
		gfx_dest = 50;
		gfx_setimgdim(50, 2, 2);
		gfx_r = gfx_g = gfx_b = 0; gfx_a = 1;
		gfx_rect(0, 0, 2, 2);
		hsla(hue, sat, lum, alpha);
		gfx_x = 0; gfx_y = 0;
		gfx_setpixel(gfx_r, gfx_g, gfx_b);
		hsla(hue, sat, lum*0.5, alpha);
		gfx_x = 1; gfx_y = 1;
		gfx_setpixel(gfx_r, gfx_g, gfx_b);
		hsla(hue, sat, lum*(2/3), alpha);
		gfx_x = 1; gfx_y = 0;
		gfx_setpixel(gfx_r, gfx_g, gfx_b);
		gfx_x = 0; gfx_y = 1;
		gfx_setpixel(gfx_r, gfx_g, gfx_b);
		gfx_dest = -1;
		last_h = hue;
		last_s = sat;
		last_l = lum;
		last_a = alpha;
	);
);

function blit_tiled_display(x y w h hue sat lum alpha)
local(coordinatelist l m xpos ypos last_x last_y last_w last_h)
(
	last_x != x || last_y != y || last_w != w || last_h != h ?
	(
		blit_prepare_display(hue, sat, lum, alpha);
		x = ceil(x);
		y = ceil(y);
		coordinatelist=GFX_BUFFER_ADDR_BASE;
		coordinatelist[0]=0;
		coordinatelist[1]=0;
		coordinatelist[2]=2;
		coordinatelist[3]=2;
		coordinatelist[6]=2;
		coordinatelist[7]=2;
		coordinatelist[8]=0;
		coordinatelist[9]=0;
		l = floor(w);
		m = floor(h);
		i = 0;
		__n_i = ceil((l-0)/2);
		loop (__n_i,
			j = 0;
			__n_j = ceil((m-0)/2);
			loop (__n_j,
				xpos = x+i;
				ypos = y+j;
				coordinatelist[4]= xpos - xpos % 2;
				coordinatelist[5]= ypos - ypos % 2;
				gfx_blitext(50, coordinatelist, 0);
				j += 2;
			);
			i += 2;
		);
		last_x = x;
		last_y = y;
		last_w = w;
		last_h = h;
	);
);

function blitOffScreen(idSrc idDest src_x src_y src_w src_h dest_x dest_y dest_w dest_h)
local(gfx_last_buffer coordinatelist)
(
	gfx_last_buffer = gfx_dest;
	gfx_dest = idDest;
	gfx_w_local = 0;
	gfx_h_local = 0;
	gfx_getimgdim(idDest, gfx_w_local, gfx_h_local);
	gfx_w_local != src_w || gfx_h_local != src_h ? gfx_setimgdim(idDest, src_w, src_h);
	coordinatelist=GFX_BUFFER_ADDR_BASE+(idSrc+2)*GFX_BUFFER_SIZE;
	coordinatelist[0]=src_x|0;
	coordinatelist[1]=src_y|0;
	coordinatelist[2]=src_w|0;
	coordinatelist[3]=src_h|0;
	coordinatelist[4]=dest_x|0;
	coordinatelist[5]=dest_y|0;
	coordinatelist[6]=dest_w|0;
	coordinatelist[7]=dest_h|0;
	coordinatelist[8]=0;
	coordinatelist[9]=0;
	gfx_blitext(idSrc, coordinatelist, 0);
	gfx_dest = gfx_last_buffer;
);

function storeGfxBuffer(idDest src_x src_y src_w src_h)
(
	gfx_a_old = gfx_a;
	gfx_a = 1;
	blitOffScreen(-1, idDest, src_x, src_y, src_w, src_h, 0, 0, src_w, src_h);
	gfx_a = gfx_a_old;
);

function restoreGfxBuffer(idSrc src_x src_y src_w src_h)
(
	gfx_a_old = gfx_a;
	gfx_a = 1;
	blitOffScreen(idSrc, -1, 0, 0, src_w, src_h, src_x, src_y, src_w, src_h);
	gfx_a = gfx_a_old;
);

function blit_border(ix iy iw ih)
(
	gfx_r = 1; gfx_g = 0; gfx_b = 0; gfx_a = 0.125;
	gfx_rect(ix, iy, iw, ih, 0);
	gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 0.5;
	gfx_rect(ix, iy, iw, ih, 0);
	gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 1;
	gfx_rect(ix-1, iy-1, iw+2, ih+2, 0);
);

function blit_border(ix iy iw ih hue sat lum)
(
	hsla(hue,0,0,0.125);
	gfx_rect(ix, iy, iw, ih, 0);
	hsla(hue,sat,lum,1);
	gfx_rect(ix, iy, iw, ih, 0);
	hsla(hue,sat,lum/8,1);
	gfx_rect(ix-1, iy-1, iw+2, ih+2, 0);
);

function blit_debug_border(ix iy iw ih hue thicknessLeft thicknessRight thicknessTop thicknessBottom)
(
	GUI_RENDER_DEBUG_BORDERS == 1 ? (
		hsla(hue,0.5,0.5,1);
		gfx_rect(ix, iy, iw, thicknessTop);
		gfx_rect(ix, iy + ih - thicknessBottom, iw, thicknessBottom);
		gfx_rect(ix, iy, thicknessLeft, ih);
		gfx_rect(ix + iw - thicknessRight, iy, thicknessRight, ih);
	);
);

function blit_debug_border(ix iy iw ih hue thickness)
(
	blit_debug_border(ix, iy, iw, ih, hue, thickness, thickness, thickness, thickness);
);

function blitMoveBlock(src_x src_y src_w src_h dx)
local(coordinatelist)
(
	gfx_a = 1;
	coordinatelist=GFX_BUFFER_ADDR_BASE;
	coordinatelist[0] = src_x;
	coordinatelist[1] = src_y;
	coordinatelist[2] = src_w;
	coordinatelist[3] = src_h;
	coordinatelist[4] = src_x + dx;
	coordinatelist[5] = src_y;
	coordinatelist[6] = src_w;
	coordinatelist[7] = src_h;
	coordinatelist[8] = 0;
	coordinatelist[9] = 0;
	gfx_blitext(gfx_dest, coordinatelist, 0);
);

function layout()
(
	this.address = UI_BUFFER_ADDR_BASE;
	this.main = UI_BUFFER_ADDR_MAIN;
	this.sub = UI_BUFFER_ADDR_SUB;
	this.status.status();
);

function layout_subgrid_select(c r col_span row_span)
local(x y w h bx by bw bh)
(
	x = this.main_x + THEME_PADDING_MAIN_LEFT;
	y = this.main_y + THEME_PADDING_MAIN_TOP;
	w = this.main_w - THEME_PADDING_MAIN_LEFT - THEME_PADDING_MAIN_RIGHT;
	h = this.main_h - THEME_PADDING_MAIN_TOP - THEME_PADDING_MAIN_BOTTOM;
	bx = (w / this.sub_cols) * c;
	by = (h / this.sub_rows) * r;
	bw = w / this.sub_cols;
	bh = h / this.sub_rows;
	(col_span > 1) ? bw *= col_span;
	(row_span > 1) ? bh *= row_span;
	bx += THEME_PADDING_SUB / 2;
	bw -= THEME_PADDING_SUB;
	by += THEME_PADDING_SUB / 2;
	bh -= THEME_PADDING_SUB;
	bx += x;
	by += y;
	this.sub.selection.x = snapXToPixels(bx);
	this.sub.selection.y = snapYToPixels(by);
	this.sub.selection.h = snapWidthToPixels(bh);
	this.sub.selection.w = snapHeightToPixels(bw);
	blit_debug_border(
		bx,by,bw,bh,
		30+(r+c)*2,
		2
	);
);

function layout_grid_select(c r cols rows)
(
	this.main.selection.w = snapXToPixels(this.main_w - THEME_PADDING_MAIN_LEFT - THEME_PADDING_MAIN_RIGHT);
	this.main.selection.h = snapYToPixels(this.main_h - THEME_PADDING_MAIN_TOP - THEME_PADDING_MAIN_BOTTOM);
	this.main.selection.x = snapWidthToPixels((this.main.selection.w / this.main_cols) * c + THEME_PADDING_MAIN_LEFT);
	this.main.selection.y = snapHeightToPixels((this.main.selection.h / this.main_crows) * r + THEME_PADDING_MAIN_TOP);
);

function layout_grid(x y w h cols rows)
(
	this.main = this.address;
	this.main_subgrids = 0;
	this.main_x = x;
	this.main_y = y;
	this.main_w = w;
	this.main_h = h;
	this.main_cols = cols;
	this.main_rows = rows;
	this.layout_grid_select(0, 0, cols, rows);
);

function layout_subgrid(s_cols s_rows)
(
	this.sub = this.address + 25 + this.main_subgrids * 25;
	this.main_subgrids += 1;
	this.sub_cols = s_cols;
	this.sub_rows = s_rows;
	this.layout_subgrid_select(0, 0, s_cols, s_rows);
);

function layout_hover()
(
	mouseInArea(this.sub.selection.x, this.sub.selection.y, this.sub.selection.w, this.sub.selection.h);
);

function layout_click()
(
	mouseClickIn(this.sub.selection.x, this.sub.selection.y, this.sub.selection.w, this.sub.selection.h);
);

function layout_hover(sub_x sub_y div_x div_y)
(
	mouseInArea(ceil(this.sub.selection.x+sub_x*floor(this.sub.selection.w/div_x))+1,
	ceil(this.sub.selection.y+sub_y*floor(this.sub.selection.h/div_y))+1,
	floor(this.sub.selection.w/div_x)-2, floor(this.sub.selection.h/div_y)-2);
);

function layout_click(sub_x sub_y div_x div_y)
(
	mouseClickIn(ceil(this.sub.selection.x+sub_x*floor(this.sub.selection.w/div_x))+1,
	ceil(this.sub.selection.y+sub_y*floor(this.sub.selection.h/div_y))+1,
	floor(this.sub.selection.w/div_x)-2, floor(this.sub.selection.h/div_y)-2);
);

function layout_alt_click()
(
	mouseALTClickIn(this.sub.selection.x, this.sub.selection.y, this.sub.selection.w, this.sub.selection.h);
);

function layout_wheel()
(
	mouseWheelIn(this.sub.selection.x, this.sub.selection.y, this.sub.selection.w, this.sub.selection.h);
);

function layout_slider_mouse_events(sliderN minVal maxVal defVal stepSize)
(
	this.layout_click() == 1 ?
	(
		slider(sliderN) = round(denormalize((mouse_x - this.sub.selection.x) / this.sub.selection.w, minVal, maxVal), stepSize);
		this.needs_update = 1;
	);
	this.layout_alt_click() == 1 ?
	(
		slider(sliderN) = defVal;
		this.needs_update = 1;
	);
	this.layout_wheel() == 1 ?
	(
		slider(sliderN) += (mouse_wheel/120) * stepSize;
		slider(sliderN) = clamp(round(slider(sliderN), stepSize), minVal, maxVal);
		this.needs_update = 1;
		mouse_wheel = 0;
	);
);

function layout_grid_background()
(
	GUI_RENDER_GRID_BACKGROUND == 1 ?
	(
		gfx_a = 1;
		blit_tiled_display(this.main_x, this.main_y, this.main_w, this.main_h, THEME_COLORS_MAIN_HUE, THEME_COLORS_MAIN_SAT, THEME_COLORS_MAIN_LUM, 1);
	);
);

function layout_subgrid_background()
(
	GUI_RENDER_SUBGRID_BACKGROUND == 1 ?
	(
		gfx_a = 1;
		blit_tiled_display(this.sub.selection.x, this.sub.selection.y, this.sub.selection.w, this.sub.selection.h, THEME_COLORS_DISPLAY_HUE, THEME_COLORS_SUB_SAT, THEME_COLORS_SUB_LUM, 1);
	);
);

function layout_label(str c r cols rows alpha)
(
	this.layout_subgrid_select(c, r, cols, rows);
	GUI_RENDER_COMPONENTS == 1 ?
	(
		drawStringCentered(this.sub.selection.x, this.sub.selection.y, this.sub.selection.w, this.sub.selection.h, str, THEME_COLORS_SUB_HUE_LABEL, THEME_COLORS_SUB_SAT+0.5, THEME_COLORS_SUB_LUM_DIM, alpha);
	);
);

function layout_label(str hue sat lum c r cols rows alpha)
(
	this.layout_subgrid_select(c, r, cols, rows);
	GUI_RENDER_COMPONENTS == 1 ?
	(
		drawStringCentered(this.sub.selection.x, this.sub.selection.y, this.sub.selection.w, this.sub.selection.h, str, hue, sat, lum, alpha);
	);
);

function layout_knob(sliderN minVal maxVal defVal stepSize title scale precision unit c r cols rows)
local(ix iy iw ih valNorm start_pos zero_cross val ang1 ang2 sx sy dh dhi i di ang5 ang6 str)
(
	this.layout_subgrid_select(c, r, cols, rows);
	GUI_RENDER_COMPONENTS == 1 ?
	(
		this.needs_update = 0;
		ix = this.sub.selection.x;
		iy = this.sub.selection.y;
		iw = this.sub.selection.w;
		ih = this.sub.selection.h;
		valNorm = normalize(slider(sliderN), minVal, maxVal);
		start_pos = minVal < 0 ? (maxVal > 0 ? "center" : "right") : "left";
		zero_cross = zeroCrossing(minVal, maxVal);
		val = (valNorm-zero_cross);
		start_pos == "left" ?
		(
			ang1 = -$pi;
			ang2 = -$pi + valNorm * (2 * $pi);
			val = val+zero_cross;
		) :
		(
			start_pos == "right" ?
			(
				ang1 = $pi;
				ang2 = $pi - (1 - valNorm) * (2 * $pi);
				val = (1-val)-zero_cross;
			) :
			(
				ang1 = 0;
				ang2 = (valNorm - 0.5) * $pi * 2;
				val < 0 ?
				(
					val = -(1-valNorm/zero_cross);
				) :
				(
					val = (valNorm-zero_cross)/(1-zero_cross);
				);
			)
		);
		val *= scale;
		this.layout_slider_mouse_events(sliderN, minVal, maxVal, defVal, stepSize);
		sx = ix + iw / 2;
		sy = iy + ih / 2;
		ih > iw ? atomic_exch(ih, iw);
		dh = ih / 2;
		dhi = ih / 4;
		hsla(THEME_COLORS_SUB_HUE_FG+(this.layout_hover()*THEME_COLORS_SHIFT_HOVER_HUE), THEME_COLORS_SUB_SAT_DIM, THEME_COLORS_SUB_LUM_DIM, 1);
		i = dh;
		di = 1 / i / 2;
		gfx_a = 0.5;
		loop (i,
			gfx_arc(sx, sy, dh - i, ang1, ang2);
			gfx_a += di;
			i -= 1;
		);
		gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 0.75;
		i = dh/3;
		di = (1/i) * 0.25;
		gfx_a = 0;
		loop (i,
			gfx_circle(sx, sy, dh - i);
			gfx_a += di;
			i -= 1;
		);
		ang5 = ang2 - 0.01745329;
		ang6 = ang2 + 0.01745329;
		gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 0.2;
		i = dh/1.1;
		loop (i,
			gfx_arc(sx, sy, dh - i, ang5, ang6);
			i -= 1;
		);
		gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 1;
		gfx_circle(sx, sy, dh, 0, 1);
		gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 0.4;
		gfx_circle(sx, sy, dh - 1, 0, 1);
		gfx_circle(sx, sy, dh - 2, 0, 1);
		gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 1;
		gfx_circle(sx, sy, dh - 3, 0, 1);
		str = #;
		sprintf(str, "%s\n%s", title, formatNumber(val, precision, unit, 0));
		this.layout_hover() ? showToolTip(mouse_x, mouse_y-10, 100, 20, str);
		this.needs_update = 1;
	);
);

function layout_volume(meter_id spl_l_min spl_l_max spl_r_min spl_r_max min_hue max_hue min_sat max_sat min_lum max_lum min_a max_a c r cols rows)
local(movement ix iy iw ih sx sy x qh y y2 offscreen_bg_vol l_min l_max r_min r_max lh1 lh rh1 rh)
(
	movement = 1;
	this.layout_subgrid_select(c, r, cols, rows);
	this.layout_subgrid_background();
	GUI_RENDER_COMPONENTS == 1 ?
	(
		ix = this.sub.selection.x;
		iy = this.sub.selection.y;
		iw = this.sub.selection.w;
		ih = this.sub.selection.h;
		sx = ix;
		sy = iy;
		x = ix + iw - movement;
		qh = floor(ih / 4);
		y = iy + qh;
		y2 = (iy + ih) - qh;
		this.rh = (max_hue - min_hue)*2;
		this.rs = max_sat - min_sat;
		this.rl = max_lum - min_lum;
		this.ra = max_a - min_a ;
		offscreen_bg_vol = 80 + meter_id;
		this._RESTORE == 0 ? this._RESTORE = GFX_OFF_SCREEN_ADDR_BASE;
		this._RESTORE[offscreen_bg_vol] == 1 ? restoreGfxBuffer(offscreen_bg_vol, ix, iy, iw, ih);
		this.status.status_is_playing() ? blitMoveBlock(ix+movement, iy, iw-movement, ih, -movement);
		blit_tiled_display(x, iy, movement, ih, THEME_COLORS_DISPLAY_HUE, THEME_COLORS_SUB_SAT_DIM, THEME_COLORS_SUB_LUM_DIM, 1);
		spl_l_min > 0 ? spl_l_min = 0;
		spl_l_max < 0 ? spl_l_max = 0;
		spl_r_min > 0 ? spl_r_min = 0;
		spl_r_max < 0 ? spl_r_max = 0;
		l_min = abs(spl_l_min);
		l_max = abs(spl_l_max);
		r_min = abs(spl_r_min);
		r_max = abs(spl_r_max);
		this.spl_l = -(l_max + l_min);
		lh1 = floor(y - qh * l_max);
		lh = floor(y + qh * l_min);
		this.spl_r = -(r_max + r_min);
		rh1 = floor(y2 - qh * r_max);
		rh = floor(y2 + qh * r_min);
		this.sl = abs(this.spl_l/2);
		this.sr = abs(this.spl_r/2);
		this.rhl = min_hue+this.rh*this.sl;
		this.rhr = min_hue+this.rh*this.sr;
		this.rsl = min_sat+this.rs*this.sl*this.sl;
		this.rsr = min_sat+this.rs*this.sr*this.sr;
		this.rll = min_lum+this.rl*this.sl*this.sl;
		this.rlr = min_lum+this.rl*this.sr*this.sr;
		this.ral = min_a+this.ra*this.sl*this.sl;
		this.rar = min_a+this.ra*this.sr*this.sr;
		hsla(this.rhl, this.rsl, this.rll, this.ral);
		gfx_line(x, lh1, x, lh);
		hsla(this.rhr, this.rsr, this.rlr, this.rar);
		gfx_line(x, rh1, x, rh);
		storeGfxBuffer(offscreen_bg_vol, ix, iy, iw, ih);
		this._RESTORE[offscreen_bg_vol] = 1;
		blit_border(ix, iy, iw, ih);
	);
);

function layout_button(sliderN title c r cols rows)
local(ix iy iw ih cx status dx selectedTitle mouse_timer)
(
	this.layout_subgrid_select(c, r, cols, rows);
	this.layout_subgrid_background();
	GUI_RENDER_COMPONENTS == 1 ?
	(
		this.needs_update = 0;
		ix = this.sub.selection.x;
		iy = this.sub.selection.y;
		iw = this.sub.selection.w;
		ih = this.sub.selection.h;
		cx = iw/2;
		status = slider(sliderN);
		dx = cx * (status == 0 ? -1 : 1);
		blit_tiled_display(ix+1, iy, iw, ih, THEME_COLORS_SUB_HUE_FG-(1-status)*180+(this.layout_hover()*THEME_COLORS_SHIFT_HOVER_HUE), THEME_COLORS_SUB_SAT_DIM, THEME_COLORS_SUB_LUM_DIM, 1);
		selectedTitle = #;
		strcpy_fromslider(selectedTitle, slider(sliderN));
		this.layout_label(selectedTitle, THEME_COLORS_SUB_HUE_LABEL, THEME_COLORS_SUB_SAT_DIM, 0.7, c, r, cols, rows, 0.9);
		this.layout_subgrid_select(c, r, cols, rows);
		blit_border(ix, iy, iw, ih);
		this.layout_hover() ?
		(
			showToolTip(mouse_x, mouse_y - 10, 100, 20, title);
		);
		this.layout_click() && mouse_timer <= 0 ?
		(
			mouse_timer = 5;
			slider(sliderN) = !slider(sliderN);
			mouse_cap = 0;
			this.needs_update = 1;
		);
		mouse_timer -= 1;
	);
);

function layout_button_square(sliderN title c r cols rows)
local(ix iy iw ih cx status selectedTitle mouse_timer)
(
	this.layout_subgrid_select(c, r, cols, rows);
	this.layout_subgrid_background();
	GUI_RENDER_COMPONENTS == 1 ?
	(
		this.needs_update = 0;
		ix = this.sub.selection.x;
		iy = this.sub.selection.y;
		iw = this.sub.selection.w;
		ih = this.sub.selection.h;
		ih > iw ? ( iy += (ih - iw) / 2; ih = iw; ) : ( ix += (iw - ih) / 2; iw = ih; );
		cx = iw/2;
		status = slider(sliderN);
		blit_tiled_display(ix+1, iy, iw, ih, THEME_COLORS_SUB_HUE_FG-(1-status)*180+(this.layout_hover()*THEME_COLORS_SHIFT_HOVER_HUE), THEME_COLORS_SUB_SAT_DIM, THEME_COLORS_SUB_LUM_DIM, 1);
		selectedTitle = #;
		strcpy_fromslider(selectedTitle, slider(sliderN));
		this.layout_label(selectedTitle, THEME_COLORS_SUB_HUE_LABEL, THEME_COLORS_SUB_SAT_DIM, 0.7, c, r, cols, rows, 0.9);
		this.layout_subgrid_select(c, r, cols, rows);
		blit_border(ix, iy, iw, ih);
		this.layout_hover() ?
		(
			showToolTip(mouse_x, mouse_y - 10, 100, 20, title);
		);
		this.layout_click() && mouse_timer <= 0 ?
		(
			mouse_timer = 5;
			slider(sliderN) = !slider(sliderN);
			mouse_cap = 0;
			this.needs_update = 1;
		);
		mouse_timer -= 1;
	);
);

function layout_combobutton(sliderN title total c r cols rows)
local(ix iy iw ih cx val hasNeighbors selectedTitle maxChars selectedTitleShort ll lr mouse_timer)
(
	this.layout_subgrid_select(c, r, cols, rows);
	this.layout_subgrid_background();
	GUI_RENDER_COMPONENTS == 1 ?
	(
		this.needs_update = 0;
		ix = this.sub.selection.x;
		iy = this.sub.selection.y;
		iw = this.sub.selection.w;
		ih = this.sub.selection.h;
		cx = iw/2;
		val = slider(sliderN);
		hasNeighbors = val > 0 && val < total-1;
		blit_tiled_display(ix+1, iy, iw, ih, THEME_COLORS_SUB_HUE_FG-180+(this.layout_hover()*THEME_COLORS_SHIFT_HOVER_HUE), THEME_COLORS_SUB_SAT_DIM, THEME_COLORS_SUB_LUM_DIM, 1);
		selectedTitle = #;
		maxChars = max(1, iw / gfx_texth - 3);
		strcpy_fromslider(selectedTitle, slider(sliderN));
		selectedTitleShort = str_format(str_format("%%.%ds", maxChars), selectedTitle);
		ll = 0;
		lr = 0;
		hasNeighbors ? (
			ll = lr = 1;
		) : (
		val == 0 ? (
			lr = 1;
		) : (
		ll = 1;
	);
);
drawStringRight(this.sub.selection.x - 5, this.sub.selection.y, this.sub.selection.w, this.sub.selection.h, ">", THEME_COLORS_SUB_HUE_LABEL+this.layout_hover()*-90, THEME_COLORS_SUB_SAT_DIM, 0.7, 0.3 + 0.3 * lr);
drawStringLeft(this.sub.selection.x + 5, this.sub.selection.y, this.sub.selection.w, this.sub.selection.h, "<", THEME_COLORS_SUB_HUE_LABEL+this.layout_hover()*-90, THEME_COLORS_SUB_SAT_DIM, 0.7, 0.3 + 0.3 * ll);
this.layout_label(selectedTitleShort, THEME_COLORS_SUB_HUE_LABEL, THEME_COLORS_SUB_SAT_DIM, 0.7, c, r, cols, rows, 0.9);
this.layout_subgrid_select(c, r, cols, rows);
blit_border(ix, iy, iw, ih);
this.layout_hover() && strlen(selectedTitleShort) < strlen(selectedTitle) ?
(
	showToolTip(mouse_x, mouse_y - 10, 100, 20, str_format("%s:\n%s", title, selectedTitle));
);
this.layout_click() && mouse_timer <= 0 ?
(
	mouse_timer = 5;
	val += 1;
	val >= total ? val = 0;
	slider(sliderN) = val;
	mouse_cap = 0;
	this.needs_update = 1;
);
mouse_timer -= 1;
this.layout_wheel() ?
(
	val += mouse_wheel > 0 ? 1 : (mouse_wheel < 0 ? -1 : 0);
	val < 0 ? val = 0;
	val >= total ? val = total - 1;
	slider(sliderN) = val;
	mouse_wheel = 0;
	this.needs_update = 1;
);
);
);

function layout_frame()
(
	GUI_RENDER_FRAME == 1 ?
	(
		gfx_a = 0.25;
		gfx_r = 0;
		gfx_g = 0;
		gfx_b = 0;
		gfx_rect(this.main_x, this.main_y, THEME_FRAME_LEFT, this.main_h);
		gfx_rect(this.main_x + this.main_w - THEME_FRAME_RIGHT, this.main_y, THEME_FRAME_RIGHT, this.main_h);
		gfx_rect(this.main_x + THEME_FRAME_LEFT, this.main_y, this.main_w - THEME_FRAME_RIGHT - THEME_FRAME_LEFT, THEME_FRAME_TOP);
		gfx_rect(this.main_x + THEME_FRAME_LEFT, this.main_y + this.main_h - THEME_FRAME_BOTTOM, this.main_w - THEME_FRAME_RIGHT - THEME_FRAME_LEFT, THEME_FRAME_BOTTOM);
		gfx_a = 1;
		blit_border(this.main_x+1, this.main_y+1, this.main_w-2, this.main_h-2, THEME_COLORS_MAIN_HUE, THEME_COLORS_MAIN_SAT, THEME_COLORS_MAIN_LUM);
	);
);
ui.layout();
ST.status();

function is_cleaner_adv()
(
	this.SQRT1_2 = sqrt(1/2);
	this.hpf1_q = this.SQRT1_2 * 3.6514837167 * 4;
	this.hpf1_f = 5 * this.SQRT1_2;
	this.hpf_f = this.hpf1_f * this.hpf1_q;
	this.hpf2_f = this.hpf1_f * 0.75;
	this.hpf3_f = this.hpf1_f * 0.5;
	this.xv_11_l = 0;
	this.xv_12_l = 0;
	this.xv_13_l = 0;
	this.xv_21_l = 0;
	this.xv_22_l = 0;
	this.xv_23_l = 0;
	this.yv_11_l = 0;
	this.yv_12_l = 0;
	this.yv_13_l = 0;
	this.yv_21_l = 0;
	this.yv_22_l = 0;
	this.yv_23_l = 0;
	this.LF_l = 0;
	this.HF_l = 0;
	this.xv_11_r = 0;
	this.xv_12_r = 0;
	this.xv_13_r = 0;
	this.xv_21_r = 0;
	this.xv_22_r = 0;
	this.xv_23_r = 0;
	this.yv_11_r = 0;
	this.yv_12_r = 0;
	this.yv_13_r = 0;
	this.yv_21_r = 0;
	this.yv_22_r = 0;
	this.yv_23_r = 0;
	this.LF_r = 0;
	this.HF_r = 0;
	this.vol_limit = abs(db2vol(-0.1));
	this.vol_reduction_in = db2vol(-15);
	this.vol_boost = db2vol(4.9);
);

function is_cleaner_adv_applyDenorm(spl)
(
	spl + (10 ^ -30);
);

function is_cleaner_adv_correctDenorm(spl)
(
	abs(spl) < (10 ^ -30) ? 0 : spl;
);

function is_cleaner_adv_set_eq_hpf1(bandGain bandFreq)
local(_w0)
(
	_w0 = TWO_PI * bandFreq / srate;
	this.hpf1_cos_w0 = cos(_w0);
	this.hpf1_alpha = sin(_w0) / (1.82574185835 * bandGain);
	this.hpf1_a0 = 1 + this.hpf1_alpha;
);

function is_cleaner_adv_set_eq_hpf2(bandGain bandFreq)
local(_w0)
(
	_w0 = TWO_PI * bandFreq / srate;
	this.hpf2_cos_w0 = cos(_w0);
	this.hpf2_alpha = sin(_w0) / (1.82574185835 * bandGain);
	this.hpf2_a0 = 1 + this.hpf2_alpha;
);

function is_cleaner_adv_set_eq_hpf3(bandGain bandFreq)
local(_w0)
(
	_w0 = TWO_PI * bandFreq / srate;
	this.hpf3_cos_w0 = cos(_w0);
	this.hpf3_alpha = sin(_w0) / (1.82574185835 * bandGain);
	this.hpf3_a0 = 1 + this.hpf3_alpha;
);

function is_cleaner_adv_hpf1_B0()
(
	(1 + this.hpf1_cos_w0) / 2;
);

function is_cleaner_adv_hpf1_B1()
(
	-(1 + this.hpf1_cos_w0);
);

function is_cleaner_adv_hpf1_B2()
(
	(1 + this.hpf1_cos_w0) / 2;
);

function is_cleaner_adv_hpf1_A1()
(
	-2 * this.hpf1_cos_w0;
);

function is_cleaner_adv_hpf1_A2()
(
	1 - this.hpf1_alpha;
);

function is_cleaner_adv_hpf2_B0()
(
	(1 + this.hpf2_cos_w0) / 2;
);

function is_cleaner_adv_hpf2_B1()
(
	-(1 + this.hpf2_cos_w0);
);

function is_cleaner_adv_hpf2_B2()
(
	(1 + this.hpf2_cos_w0) / 2;
);

function is_cleaner_adv_hpf2_A1()
(
	-2 * this.hpf2_cos_w0;
);

function is_cleaner_adv_hpf2_A2()
(
	1 - this.hpf2_alpha;
);

function is_cleaner_adv_hpf3_B0()
(
	(1 + this.hpf3_cos_w0) / 2;
);

function is_cleaner_adv_hpf3_B1()
(
	-(1 + this.hpf3_cos_w0);
);

function is_cleaner_adv_hpf3_B2()
(
	(1 + this.hpf3_cos_w0) / 2;
);

function is_cleaner_adv_hpf3_A1()
(
	-2 * this.hpf3_cos_w0;
);

function is_cleaner_adv_hpf3_A2()
(
	1 - this.hpf3_alpha;
);

function is_cleaner_adv_applyEQ(s b0 b1 b2 a1 a2 x1 x2 y1 y2)
(
	b0 * s + b1 * x1 + b2 * x2 - a1 * y1 - a2 * y2;
);

function is_cleaner_adv_init(strength boom)
local(abs_str f)
(
	strength = 1.2 + 2.8 * strength;
	strength = sqr(strength)/(20-10*(0.2+boom));
	abs_str = abs(strength);
	f = this.hpf_f * strength;
	this.is_cleaner_adv_set_eq_hpf1(1.2 * abs_str, this.hpf1_f + f);
	this.hpf1_b0 = this.is_cleaner_adv_hpf1_B0() / this.hpf1_a0;
	this.hpf1_b1 = this.is_cleaner_adv_hpf1_B1() / this.hpf1_a0;
	this.hpf1_b2 = this.is_cleaner_adv_hpf1_B2() / this.hpf1_a0;
	this.hpf1_a1 = this.is_cleaner_adv_hpf1_A1() / this.hpf1_a0;
	this.hpf1_a2 = this.is_cleaner_adv_hpf1_A2() / this.hpf1_a0;
	this.is_cleaner_adv_set_eq_hpf2(1.0 * abs_str, this.hpf2_f + f);
	this.hpf2_b0 = this.is_cleaner_adv_hpf2_B0() / this.hpf2_a0;
	this.hpf2_b1 = this.is_cleaner_adv_hpf2_B1() / this.hpf2_a0;
	this.hpf2_b2 = this.is_cleaner_adv_hpf2_B2() / this.hpf2_a0;
	this.hpf2_a1 = this.is_cleaner_adv_hpf2_A1() / this.hpf2_a0;
	this.hpf2_a2 = this.is_cleaner_adv_hpf2_A2() / this.hpf2_a0;
	this.is_cleaner_adv_set_eq_hpf3(0.8 * abs_str, this.hpf3_f + f);
	this.hpf3_b0 = this.is_cleaner_adv_hpf3_B0() / this.hpf3_a0;
	this.hpf3_b1 = this.is_cleaner_adv_hpf3_B1() / this.hpf3_a0;
	this.hpf3_b2 = this.is_cleaner_adv_hpf3_B2() / this.hpf3_a0;
	this.hpf3_a1 = this.is_cleaner_adv_hpf3_A1() / this.hpf3_a0;
	this.hpf3_a2 = this.is_cleaner_adv_hpf3_A2() / this.hpf3_a0;
);

function is_cleaner_adv_init()
(
	this.is_cleaner_adv_init(1, 0);
);

function is_cleaner_adv_clean(ch1 ch2 w_dc w_env shift intensity)
local(input_l input_r freq t0 t1 tmpSpl)
(
	input_l = spl(ch1);
	input_r = spl(ch2);
	input_l *= this.vol_reduction_in;
	input_r *= this.vol_reduction_in;
	freq = 5944.465310 + shift * 10000;
	freq == 0 ? freq = 5944.465310;
	this.xv_11_l = this.xv_12_l;
	this.xv_12_l = this.xv_13_l;
	this.xv_13_l = input_l / freq;
	this.yv_11_l = this.yv_12_l;
	this.yv_12_l = this.yv_13_l;
	this.yv_13_l = (this.xv_11_l + this.xv_13_l)
	+ 2 * this.xv_12_l
	+ ( -(0.0636529842 + shift * 0.9) * this.yv_11_l)
	+ ( (1.0629800894 + shift * 0.9) * this.yv_12_l);
	this.LF_l = this.yv_13_l;
	this.xv_21_l = this.xv_22_l;
	this.xv_22_l = this.xv_23_l;
	this.xv_23_l = this.LF_l / freq;
	this.yv_21_l = this.yv_22_l;
	this.yv_22_l = this.yv_23_l;
	this.yv_23_l = (this.xv_21_l + this.xv_23_l)
	+ 2 * this.xv_22_l
	+ ( -(0.0636529842 + shift * 0.9) * this.yv_21_l)
	+ ( (1.0629800894 + shift * 0.9) * this.yv_22_l);
	this.HF_l = this.yv_23_l;
	this.xv_11_r = this.xv_12_r;
	this.xv_12_r = this.xv_13_r;
	this.xv_13_r = input_r / freq;
	this.yv_11_r = this.yv_12_r;
	this.yv_12_r = this.yv_13_r;
	this.yv_13_r = (this.xv_11_r + this.xv_13_r)
	+ 2 * this.xv_12_r
	+ ( -(0.0636529842 + shift * 0.9) * this.yv_11_r)
	+ ( (1.0629800894 + shift * 0.9) * this.yv_12_r);
	this.LF_r = this.yv_13_r;
	this.xv_21_r = this.xv_22_r;
	this.xv_22_r = this.xv_23_r;
	this.xv_23_r = this.LF_r / freq;
	this.yv_21_r = this.yv_22_r;
	this.yv_22_r = this.yv_23_r;
	this.yv_23_r = (this.xv_21_r + this.xv_23_r)
	+ 2 * this.xv_22_r
	+ ( -(0.0636529842 + shift * 0.9) * this.yv_21_r)
	+ ( (1.0629800894 + shift * 0.9) * this.yv_22_r);
	this.HF_r = this.yv_23_r;
	input_l -= this.HF_l;
	input_r -= this.HF_r;
	this.imp = 1;
	this.is_clean = intensity + this.imp * this.SQRT1_2;
	t0 = input_l * (1.5 + this.is_clean);
	t1 = input_r * (1.5 + this.is_clean);
	tmpSpl = t0;
	t0 = this.is_cleaner_adv_applyEQ(t0, this.hpf1_b0, this.hpf1_b1, this.hpf1_b2, this.hpf1_a1, this.hpf1_a2, this.hpf1_l_x1, this.hpf1_l_x2, this.hpf1_l_y1, this.hpf1_l_y2);
	this.hpf1_l_x2 = this.hpf1_l_x1;
	this.hpf1_l_x1 = tmpSpl;
	this.hpf1_l_y2 = this.hpf1_l_y1;
	this.hpf1_l_y1 = this.is_cleaner_adv_correctDenorm(t0);
	tmpSpl = t1;
	t1 = this.is_cleaner_adv_applyEQ(t1, this.hpf1_b0, this.hpf1_b1, this.hpf1_b2, this.hpf1_a1, this.hpf1_a2, this.hpf1_r_x1, this.hpf1_r_x2, this.hpf1_r_y1, this.hpf1_r_y2);
	this.hpf1_r_x2 = this.hpf1_r_x1;
	this.hpf1_r_x1 = tmpSpl;
	this.hpf1_r_y2 = this.hpf1_r_y1;
	this.hpf1_r_y1 = this.is_cleaner_adv_correctDenorm(t1);
	tmpSpl = this.is_cleaner_adv_applyDenorm(t0);
	t0 = this.is_cleaner_adv_applyEQ(t0, this.hpf2_b0, this.hpf2_b1, this.hpf2_b2, this.hpf2_a1, this.hpf2_a2, this.hpf2_l_x1, this.hpf2_l_x2, this.hpf2_l_y1, this.hpf2_l_y2);
	this.hpf2_l_x2 = this.hpf2_l_x1;
	this.hpf2_l_x1 = tmpSpl;
	this.hpf2_l_y2 = this.hpf2_l_y1;
	this.hpf2_l_y1 = this.is_cleaner_adv_correctDenorm(t0);
	tmpSpl = this.is_cleaner_adv_applyDenorm(t1);
	t1 = this.is_cleaner_adv_applyEQ(t1, this.hpf2_b0, this.hpf2_b1, this.hpf2_b2, this.hpf2_a1, this.hpf2_a2, this.hpf2_r_x1, this.hpf2_r_x2, this.hpf2_r_y1, this.hpf2_r_y2);
	this.hpf2_r_x2 = this.hpf2_r_x1;
	this.hpf2_r_x1 = tmpSpl;
	this.hpf2_r_y2 = this.hpf2_r_y1;
	this.hpf2_r_y1 = this.is_cleaner_adv_correctDenorm(t1);
	tmpSpl = this.is_cleaner_adv_applyDenorm(t0);
	t0 = this.is_cleaner_adv_applyEQ(t0, this.hpf3_b0, this.hpf3_b1, this.hpf3_b2, this.hpf3_a1, this.hpf3_a2, this.hpf3_l_x1, this.hpf3_l_x2, this.hpf3_l_y1, this.hpf3_l_y2);
	this.hpf3_l_x2 = this.hpf3_l_x1;
	this.hpf3_l_x1 = tmpSpl;
	this.hpf3_l_y2 = this.hpf3_l_y1;
	this.hpf3_l_y1 = this.is_cleaner_adv_correctDenorm(t0);
	tmpSpl = this.is_cleaner_adv_applyDenorm(t1);
	t1 = this.is_cleaner_adv_applyEQ(t1, this.hpf3_b0, this.hpf3_b1, this.hpf3_b2, this.hpf3_a1, this.hpf3_a2, this.hpf3_r_x1, this.hpf3_r_x2, this.hpf3_r_y1, this.hpf3_r_y2);
	this.hpf3_r_x2 = this.hpf3_r_x1;
	this.hpf3_r_x1 = tmpSpl;
	this.hpf3_r_y2 = this.hpf3_r_y1;
	this.hpf3_r_y1 = this.is_cleaner_adv_correctDenorm(t1);
	t0 = this.is_cleaner_adv_applyDenorm(t0) + this.HF_l;
	t1 = this.is_cleaner_adv_applyDenorm(t1) + this.HF_r;
	t0 *= this.vol_boost;
	t1 *= this.vol_boost;
	t0 = max(-this.vol_limit, min(this.vol_limit, t0));
	t1 = max(-this.vol_limit, min(this.vol_limit, t1));
	spl(ch1) = t0;
	spl(ch2) = t1;
);

function is_cleaner_adv_clean(ch1 ch2)
(
	this.is_cleaner_adv_clean(ch1, ch2, 0.25, 0.001, 0.82, 1);
);

function LR4()
(
	this.xv_11 = 0;
	this.xv_12 = 0;
	this.xv_13 = 0;
	this.xv_21 = 0;
	this.xv_22 = 0;
	this.xv_23 = 0;
	this.yv_11 = 0;
	this.yv_12 = 0;
	this.yv_13 = 0;
	this.yv_21 = 0;
	this.yv_22 = 0;
	this.yv_23 = 0;
	this.LF = 0;
	this.HF = 0;
);

function LR4_crossover(input freq shift)
(
	freq == 0 ? freq = 5944.465310;
	this.xv_11 = this.xv_12;
	this.xv_12 = this.xv_13;
	this.xv_13 = input / freq;
	this.yv_11 = this.yv_12;
	this.yv_12 = this.yv_13;
	this.yv_13 = (this.xv_11 + this.xv_13)
	+ 2 * this.xv_12
	+ ( -(0.0636529842+shift*0.9) * this.yv_11)
	+ ( (1.0629800894+shift*0.9) * this.yv_12);
	this.LF = this.yv_13;
	this.xv_21 = this.xv_22;
	this.xv_22 = this.xv_23;
	this.xv_23 = this.LF / freq;
	this.yv_21 = this.yv_22;
	this.yv_22 = this.yv_23;
	this.yv_23 = (this.xv_21 + this.xv_23)
	+ 2 * this.xv_22
	+ ( -(0.0636529842+shift*0.9) * this.yv_21)
	+ ( (1.0629800894+shift*0.9) * this.yv_22);
	this.HF = this.yv_23;
);

function LR4_mix(spl ratio_lf ratio_hf crossover_freq shift)
(
	this.LR4_crossover(spl, crosover_freq, shift);
	spl -= this.HF;
	spl -= this.LF;
	spl += (this.HF * ratio_hf);
	spl += (this.LF * ratio_lf);
	spl;
);

function MIDI_CC(cc val min_val max_val min_difference)
(
	this.cc = cc;
	this.val = 0;
	this.val_min = min_val;
	this.val_max = max_val;
	this.val_range = max_val - min_val;
	this.val_default = val;
	this.val_diff = min_difference;
);

function MIDI_CC_set(val)
(
	val = min(max((((val - this.val_min) / this.val_range) * 127) | 0, 0), 127);
	val <= (this.val - this.val_diff) || val >= (this.val + this.val_diff) ? (
		this.val = val;
		midisend(0, $xB0, this.cc | (this.val << 8));
	);
);
SQRT22 = sqrt(2)/2.0;

function stereo_mixer(splL splR)
(
	this.lim.is_cleaner_adv();
	this.lim.is_cleaner_adv_init();
	this.lr4L.LR4();
	this.lr4R.LR4();
	this.sL.signal();
	this.sR.signal();
	this.splL = splL;
	this.splR = splR;
	this.minL = this.maxL = this.minR = this.maxR = 0;
	this.ccL.MIDI_CC(90, 0, 0, 0.5, 1.5);
	this.ccR.MIDI_CC(91, 0, 0, 0.5, 1.5);
);

function stereo_mixer_ms_decode()
local(l0 l1)
(
	l0 = spl(this.splL);
	l1 = spl(this.splR);
	spl(this.splL) = l0 + l1;
	spl(this.splR) = l0 + -l1;
);

function stereo_mixer_ms_encode()
local(l0 l1)
(
	l0 = spl(this.splL);
	l1 = spl(this.splR);
	spl(this.splL) = 0.5 * l0 + 0.5 * l1;
	spl(this.splR) = 0.5 * l0 + -0.5 * l1;
);

function stereo_mixer_width(bal)
(
	this.stereo_mixer_ms_decode();
	spl(this.splL) *= (1 - bal);
	spl(this.splR) *= (1 + bal);
	this.stereo_mixer_ms_encode();
);

function stereo_mixer_balance(amount)
(
	amount < 0 ? (
		spl(this.splR) *= (1 + amount);
	);
	amount > 0 ? (
		spl(this.splL) *= (1 - amount);
	);
);

function stereo_mixer_pan(amount)
local(a sinA cosA AL AR)
(
	a = (amount * 45) * $pi / 180;
	sinA = sin(a);
	cosA = cos(a);
	AL = SQRT22 * (cosA + sinA);
	AR = SQRT22 * (cosA - sinA);
	spl(this.splL) *= AR;
	spl(this.splR) *= AL;
);

function stereo_mixer_phase(rotation)
local(coefCos coefSin)
(
	rotation = rotation * ($pi / 180);
	orgspl0 = spl(this.splL);
	orgspl1 = spl(this.splR);
	coefCos = cos(rotation);
	coefSin = sin(rotation);
	spl(this.splL) = (orgspl0 * coefCos - orgspl1 * coefSin);
	spl(this.splR) = (orgspl0 * coefSin + orgspl1 * coefCos);
);

function stereo_mixer_lf_hf(lfhfbal)
local(hfb lfb)
(
	lfhfbal > 0
	?
	(
		hfb = 1 + lfhfbal;
		lfb = 1 - lfhfbal;
	)
	:
	(
		hfb = 1 - abs(lfhfbal);
		lfb = 1 + abs(lfhfbal);
	);
	spl(this.splL) = this.lr4L.LR4_mix(spl(this.splL), lfb, hfb, 0, 1);
	spl(this.splR) = this.lr4R.LR4_mix(spl(this.splR), lfb, hfb, 0, 1);
);

function stereo_mixer_volume(db)
local(vol)
(
	vol = db2vol(db);
	spl(this.splL) *= vol;
	spl(this.splR) *= vol;
);

function stereo_mixer_limit()
(
	this.lim.is_cleaner_adv_clean(this.splL, this.splR);
);

function stereo_mixer_process(lfhf phase pan width db limit pan_mode mix_mode)
local(tsplL tsplR tspl)
(
	mix_mode != 0 ? (
		mix_mode == 1 ? (
			tsplL = spl(this.splL);
			tsplR = spl(this.splR);
			spl(this.splL) = tsplR;
			spl(this.splR) = tsplL;
		);
		mix_mode == 2 ? (
			tspl = 0.5 * spl(this.splR) + 0.5 * spl(this.splL);
			spl(this.splL) = tspl;
			spl(this.splR) = tspl;
		);
		mix_mode == 3 ? (
			tspl = spl(this.splL);
			spl(this.splL) = tspl;
			spl(this.splR) = tspl;
		);
		mix_mode == 4 ? (
			tspl = spl(this.splR);
			spl(this.splL) = tspl;
			spl(this.splR) = tspl;
		);
	);
	lfhf != 0 ? (
		this.stereo_mixer_lf_hf(lfhf);
	);
	phase != 0 ? (
		this.stereo_mixer_phase(phase);
	);
	pan != 0 ? (
		pan_mode == 1 ? (
			this.stereo_mixer_balance(pan);
		) : (
		this.stereo_mixer_pan(pan);
	);
);
width != 0 ? (
	this.stereo_mixer_width(width);
);
db != 0 ? (
	this.stereo_mixer_volume(db);
);
limit == 1 ? (
	this.stereo_mixer_limit();
);
this.envL = this.sL.signal_envelope(spl(this.splL), 0.3, 0.0001) * 4;
this.envR = this.sR.signal_envelope(spl(this.splR), 0.3, 0.0001) * 4;
this.minL = min(this.minL, spl(this.splL)); this.maxL = max(this.maxL, spl(this.splL));
this.minR = min(this.minR, spl(this.splR)); this.maxR = max(this.maxR, spl(this.splR));
this.minEnvL = min(this.minEnvL, -this.envL); this.maxEnvL = max(this.maxEnvL, this.envL);
this.minEnvR = min(this.minEnvR, -this.envR); this.maxEnvR = max(this.maxEnvR, this.envR);
);

function stereo_mixer_update_cc(cc_l_slider cc_r_slider)
(
	this.ccL.MIDI_CC_set(this.maxEnvL);
	this.ccR.MIDI_CC_set(this.maxEnvR);
	slider(cc_l_slider) = this.ccL.val;
	slider(cc_r_slider) = this.ccR.val;
	slider_automate(2 ^ cc_l_slider);
	slider_automate(2 ^ cc_r_slider);
);

function stereo_mixer_reset()
(
	this.minL = this.maxL = this.minR = this.maxR = 0;
	this.minEnvL = this.maxEnvL = this.minEnvR = this.maxEnvR = 0;
);
gfx_clear = -1;
sm01.stereo_mixer(0,1);

/*||||||||||||||||||||||||||||||||||||||*/

@slider
/*||||||||||||||||||||||||||||||||||||||*/

/*||||||||||||||||||||||||||||||||||||||*/

@block
/*||||||||||||||||||||||||||||||||||||||*/

/*||||||||||||||||||||||||||||||||||||||*/

@sample
/*||||||||||||||||||||||||||||||||||||||*/
ST.status_update();
ST.status_is_playing() ?
(
	slider8 | 0 ? sm01.stereo_mixer_update_cc(10, 11);
	sm01.stereo_mixer_process(slider1, slider2, slider3, slider4, slider5, slider6, slider7, slider9);
);

/*||||||||||||||||||||||||||||||||||||||*/

@gfx 260 150
/*||||||||||||||||||||||||||||||||||||||*/
gfx_w < 260 ? gfx_w = 260;
gfx_h < 150 ? gfx_h = 150;
h = 75;
ui.layout_grid(0, h, gfx_w, gfx_h-h, 1, 1);
ui.layout_grid_background();
ui.layout_subgrid(1, 1);
ui.layout_volume(1, sm01.minL, sm01.maxL, sm01.minR, sm01.maxR, 120, 360, 0.5, 0.5, 0.5, 0.5, 1, 1, 	0, 0, 1, 1);
ui.layout_frame();
ui.layout_grid(0, 0, gfx_w, h, 1, 1);
ui.layout_grid_background();
ui.layout_subgrid(8, 3);
ui.layout_button_square(8, "MIDI Out", 	7, 0, 1, 2);
ui.layout_button_square(6, "Limiter", 	6, 0, 1, 2);
ui.layout_knob(5, -24, 24, 0, 0.05, "Volume", 24, 2, "dB", 	5, 0, 1, 2);
ui.layout_knob(4, -1, 1, 0, 0.01, "Width", 100, 0, "%", 	4, 0, 1, 2);
ui.layout_knob(3, -1, 1, 0, 0.01, "Panning", 100, 0, "%", 	3, 0, 1, 2);
ui.layout_knob(2, -180, 180, 0, 1, "Phase", 180, 0, " degrees", 	2, 0, 1, 2);
ui.layout_knob(1, -1, 1, 0, 0.01, "LF/HF Balance", 100, 0, "%", 	1, 0, 1, 2);
ui.layout_combobutton(9, "Input", 5, 	0, 0, 1, 2);
ui.layout_label("MIDI", 	7, 2, 1, 1, 1);
ui.layout_label("Lim", 	6, 2, 1, 1, 1);
ui.layout_label("Vol", 	5, 2, 1, 1, 1);
ui.layout_label("Wid", 	4, 2, 1, 1, 1);
ui.layout_button(7, "Pan Mode", 	3, 2, 1, 1);
ui.layout_label("Rot", 	2, 2, 1, 1, 1);
ui.layout_label("LF:HF", 	1, 2, 1, 1, 1);
ui.layout_label("In", 	0, 2, 1, 1, 1);
ui.layout_frame();
mouse_wheel = 0;
sm01.stereo_mixer_reset();
